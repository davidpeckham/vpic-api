{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"vpic-api A client library for the U.S. NHTSA vPIC API. vPIC is the United States National Highway Traffic Safety Administration (NHTSA) Vehicle Product Information Catalog (vPIC) Vehicle Listing API . The API available 24/7, is free to use, and doesn't require registration. Use the vpic-api client library to decode Vehicle Identification Numbers (VINS), and get information about manufacturers, plants, makes, and models. Vehicles vPIC has information about these types of vehicles sold in the USA: Bus Incomplete Vehicle Low Speed Vehicle (LSV) Motorcycle Multipurpose Passenger Vehicle (MPV) Passenger Car Trailer Truck Note that NHTSA uses automatic rate limiting. They request that you save batch processing for evenings and weekends (Eastern Time). For more on the NHTSA vPIC, visit their home page . Features Decode a 17-digit Vehicle Identification Number (VIN) Decode a partial VIN when you don't have the complete VIN Get information about vehicle manufacturers, plants, makes, and models Supports 1981 and later model years Alternatives In May 2021, NHTSA released a standalone database for Microsoft SQL Server 2012. This database has all of the information you need to decode VINs. You can download it from the vPIC API home page .","title":"About"},{"location":"index.html#vpic-api","text":"A client library for the U.S. NHTSA vPIC API. vPIC is the United States National Highway Traffic Safety Administration (NHTSA) Vehicle Product Information Catalog (vPIC) Vehicle Listing API . The API available 24/7, is free to use, and doesn't require registration. Use the vpic-api client library to decode Vehicle Identification Numbers (VINS), and get information about manufacturers, plants, makes, and models.","title":"vpic-api"},{"location":"index.html#vehicles","text":"vPIC has information about these types of vehicles sold in the USA: Bus Incomplete Vehicle Low Speed Vehicle (LSV) Motorcycle Multipurpose Passenger Vehicle (MPV) Passenger Car Trailer Truck Note that NHTSA uses automatic rate limiting. They request that you save batch processing for evenings and weekends (Eastern Time). For more on the NHTSA vPIC, visit their home page .","title":"Vehicles"},{"location":"index.html#features","text":"Decode a 17-digit Vehicle Identification Number (VIN) Decode a partial VIN when you don't have the complete VIN Get information about vehicle manufacturers, plants, makes, and models Supports 1981 and later model years","title":"Features"},{"location":"index.html#alternatives","text":"In May 2021, NHTSA released a standalone database for Microsoft SQL Server 2012. This database has all of the information you need to decode VINs. You can download it from the vPIC API home page .","title":"Alternatives"},{"location":"client.html","text":"Client module Client A client library for the U.S. NHTSA vPIC API Client returns JSON responses from the vPIC API. vPIC responses don't always use the same name for a variable, so by default this library standardizes variable names. You can disable this by creating a client like this: ``c = Client(standardize_names=False)`` If you prefer to receive model objects instead of JSON responses, use vpic.Client instead. A client library for the United States National Highway Traffic Safety Administration (NHTSA) Vehicle Product Information Catalog (vPIC) Vehicle Listing API. Use this to gather information on vehicles and their specifications, and to decode VINs to extract information for specific vehicles. vPIC has information about these types of vehicles sold or imported in the USA: Bus Incomplete Vehicle Low Speed Vehicle (LSV) Motorcycle Multipurpose Passenger Vehicle (MPV) Passenger Car Trailer Truck vPIC has all of the information about how manufacturers assign a VIN that encodes the vehicles characteristics. Vehicle manufacturers provide this information to NHTSA under U.S. law 49 CFR Part 565. The API available 24/7, is free to use, and does not require registration. NHTSA uses automatic traffic rate controls to maintain the performance of the API and their websites that use the API. See https://vpic.nhtsa.dot.gov/api for more on the API. Attributes: Name Type Description host Hostname, including http(s)://, of the vPIC instance to query. standardize_variables vPIC uses different names for the same variable, so this client standarizes those names by default. Set this to False to receive the raw vPIC response. decode_vin ( self , vin , model_year = None , extend = False , flatten = True ) Decode a 17-digit Vehicle Identification Number (VIN) or partial VIN. Decode the make, model, series, trim, and other vehicle information from VIN. Model year is required for pre-1980 vehicles, though vPIC recommends that you always pass it. If you don't have a complete 17-digit VIN, you can pass a partial VIN, using asterisk (*) for missing characters. The VIN check digit (the 9th character) isn't required for partial VINs. The shorter the partial VIN, the less vehicle information you'll receive in the response. See get_vehicle_variable_list for the variables returned here. Parameters: Name Type Description Default vin str A 17-digit VIN or partial VIN. Use asterisk for missing characters. required model_year int The vehicle's model year. Recommended, but not required. None extend If True, response will include variables for other NHTSA programs like NCSA. Defaults to False. False flatten True to receive vehicle variables in key-value pairs (this is the default and usually best choice). False to receive them as a list of variable objects that include the variable ID. True Exceptions: Type Description ValueError if vin is missing or isn't 6 to 17 characters long. ValueError if model_year is earlier than 1981. Source code in vpic/client.py def decode_vin ( self , vin : str , model_year : int = None , extend = False , flatten = True ) -> Dict [ str , Any ]: \"\"\"Decode a 17-digit Vehicle Identification Number (VIN) or partial VIN. Decode the make, model, series, trim, and other vehicle information from VIN. Model year is required for pre-1980 vehicles, though vPIC recommends that you always pass it. If you don't have a complete 17-digit VIN, you can pass a partial VIN, using asterisk (*) for missing characters. The VIN check digit (the 9th character) isn't required for partial VINs. The shorter the partial VIN, the less vehicle information you'll receive in the response. See get_vehicle_variable_list for the variables returned here. Args: vin: A 17-digit VIN or partial VIN. Use asterisk for missing characters. model_year: The vehicle's model year. Recommended, but not required. extend: If True, response will include variables for other NHTSA programs like NCSA. Defaults to False. flatten: True to receive vehicle variables in key-value pairs (this is the default and usually best choice). False to receive them as a list of variable objects that include the variable ID. Raises: ValueError: if ``vin`` is missing or isn't 6 to 17 characters long. ValueError: if ``model_year`` is earlier than 1981. \"\"\" if vin is None : raise ValueError ( \"vin is required\" ) if not len ( vin ) in range ( 6 , 17 + 1 ): raise ValueError ( \"vin must be at least 6 characters and at most 17 characters\" ) if model_year and model_year < 1981 : raise ValueError ( \"model year must be 1981 or later\" ) endpoint = \"DecodeVin\" if flatten : endpoint = \"DecodeVinValues\" if extend : endpoint = f \" { endpoint } Extended\" if model_year is not None : params = { \"modelyear\" : model_year } else : params = {} results = self . _request ( f \" { endpoint } / { vin } \" , params ) return results [ 0 ] if flatten else results decode_vin_batch ( self , vins ) Decode a batch of 17-digit VINs or partial VINs. Model year is required for pre-1980 vehicles, though vPIC recommends that you always pass it. If you don't have a complete 17-digit VIN, you can pass a partial VIN, using asterisk (*) for missing characters. The VIN check digit (the 9th character) isn't required for partial VINs. The shorter the partial VIN, the less vehicle information you'll receive in the response. Vehicle variables will be returned in key-value pairs, the same format returned by decode_vin(.., flatten=True). See get_vehicle_variable_list for the variables returned here. Parameters: Name Type Description Default vins List[str] A list of 17-digit VIN or partial VINs and optional model year. Use asterisk for missing characters. For example: [\"VIN, model_year\", \"VIN, model_year\", ...] required Exceptions: Type Description ValueError if vin is missing or isn't 6 to 17 characters long. ValueError if model_year is earlier than 1981. Source code in vpic/client.py def decode_vin_batch ( self , vins : List [ str ]) -> List [ Dict [ str , Any ]]: \"\"\"Decode a batch of 17-digit VINs or partial VINs. Model year is required for pre-1980 vehicles, though vPIC recommends that you always pass it. If you don't have a complete 17-digit VIN, you can pass a partial VIN, using asterisk (*) for missing characters. The VIN check digit (the 9th character) isn't required for partial VINs. The shorter the partial VIN, the less vehicle information you'll receive in the response. Vehicle variables will be returned in key-value pairs, the same format returned by decode_vin(.., flatten=True). See get_vehicle_variable_list for the variables returned here. Args: vins: A list of 17-digit VIN or partial VINs and optional model year. Use asterisk for missing characters. For example: [\"VIN, model_year\", \"VIN, model_year\", ...] Raises: ValueError: if ``vin`` is missing or isn't 6 to 17 characters long. ValueError: if ``model_year`` is earlier than 1981. \"\"\" if vins is None : raise ValueError ( \"vins is required\" ) if not len ( vins ) in range ( 1 , 50 + 1 ): raise ValueError ( \"pass at least one VIN, and at most 50 VINs\" ) return self . _request_post ( \"DecodeVINValuesBatch\" , data = { \"DATA\" : \";\" . join ( vins )}) decode_wmi ( self , wmi ) Decode a WMI to get manufacturer information Provides information on the World Manufacturer Identifier for a specific WMI code. Parameters: Name Type Description Default wmi str A 3-character or 6-character World Manufacturer Index code. Large volume manufacturers usually have a 3 character WMI representing positions 1 to 3 (\"JTD\") of a VIN. Smaller manufacturers have a 6 character WMI representing positions 1 to 3 and 12 to 14 of a VIN. required Exceptions: Type Description ValueError if wmi is missing or isn't 3 or 6 characters long. Examples: >>> decode_wmi ( '1FT' ) { \"CommonName\" : \"Ford\" , \"CreatedOn\" : \"2015-03-23\" , \"DateAvailableToPublic\" : \"2015-01-01\" , \"MakeName\" : \"FORD\" , \"ManufacturerName\" : \"FORD MOTOR COMPANY, USA\" , \"ParentCompanyName\" : \"\" , \"URL\" : \"http://www.ford.com/\" , \"UpdatedOn\" : null , \"VehicleType\" : \"Truck \" , } Source code in vpic/client.py def decode_wmi ( self , wmi : str ) -> Dict [ str , Any ]: \"\"\"Decode a WMI to get manufacturer information Provides information on the World Manufacturer Identifier for a specific WMI code. Args: wmi: A 3-character or 6-character World Manufacturer Index code. Large volume manufacturers usually have a 3 character WMI representing positions 1 to 3 (\"JTD\") of a VIN. Smaller manufacturers have a 6 character WMI representing positions 1 to 3 and 12 to 14 of a VIN. Raises: ValueError: if ``wmi`` is missing or isn't 3 or 6 characters long. Example: >>> decode_wmi('1FT') { \"CommonName\": \"Ford\", \"CreatedOn\": \"2015-03-23\", \"DateAvailableToPublic\": \"2015-01-01\", \"MakeName\": \"FORD\", \"ManufacturerName\": \"FORD MOTOR COMPANY, USA\", \"ParentCompanyName\": \"\", \"URL\": \"http://www.ford.com/\", \"UpdatedOn\": null, \"VehicleType\": \"Truck \", } \"\"\" if not len ( wmi ) in [ 3 , 6 ]: raise ValueError ( \"WMI must be 3 or 6 characters\" ) result = self . _request ( f \"DecodeWMI/ { wmi } \" )[ 0 ] # result[\"WMI\"] = wmi return result get_all_makes ( self ) Returns all of the makes registered with vPIC. Examples: >>> get_all_makes () [ { \"MakeId\" : 440 , \"MakeName\" : \"ASTON MARTIN\" }, { \"MakeId\" : 441 , \"MakeName\" : \"TESLA\" }, { \"MakeId\" : 442 , \"MakeName\" : \"JAGUAR\" }, ... ] Source code in vpic/client.py def get_all_makes ( self ) -> List [ Dict [ str , Any ]]: \"\"\"Returns all of the makes registered with vPIC. Examples: >>> get_all_makes() [ { \"MakeId\": 440, \"MakeName\": \"ASTON MARTIN\" }, { \"MakeId\": 441, \"MakeName\": \"TESLA\" }, { \"MakeId\": 442, \"MakeName\": \"JAGUAR\" }, ... ] \"\"\" return self . _request ( \"GetAllMakes\" ) get_all_manufacturers ( self , manufacturer_type = None , page = 1 ) Return a list of vPIC manufacturers of the given manufacturer_type. This provides a list of all the Manufacturers available in vPIC Dataset. See get_vehicle_variable_values_list(\"Manufacturer Type\") for the list of manufacturer types. Parameters: Name Type Description Default manufacturer_type str The manufacturer type, which is Incomplete Vehicles, Completed Vehicle Manufacturer, Incomplete Vehicle Manufacturer, Intermediate Manufacturer, Final-Stage Manufacturer, Alterer, Replica Vehicle Manufacturer. You can pass the full type name, or a substring of the type. None page int results are paginated; this is the page number to return 1 Examples: >>> get_all_manufacturers ( \"Completed Vehicle\" , 1 ) [ { \"Country\" : \"UNITED STATES (USA)\" , \"Mfr_CommonName\" : \"Tesla\" , \"Mfr_ID\" : 955 , \"Mfr_Name\" : \"TESLA, INC.\" , \"VehicleTypes\" : [ { \"IsPrimary\" : true , \"Name\" : \"Passenger Car\" }, { \"IsPrimary\" : false , \"Name\" : \"Multipurpose Passenger Vehicle (MPV)\" } }, ... ] Source code in vpic/client.py def get_all_manufacturers ( self , manufacturer_type : str = None , page : int = 1 ) -> List [ Dict [ str , Any ]]: \"\"\"Return a list of vPIC manufacturers of the given manufacturer_type. This provides a list of all the Manufacturers available in vPIC Dataset. See ``get_vehicle_variable_values_list(\"Manufacturer Type\")`` for the list of manufacturer types. Args: manufacturer_type: The manufacturer type, which is Incomplete Vehicles, Completed Vehicle Manufacturer, Incomplete Vehicle Manufacturer, Intermediate Manufacturer, Final-Stage Manufacturer, Alterer, Replica Vehicle Manufacturer. You can pass the full type name, or a substring of the type. page: results are paginated; this is the page number to return Examples: >>> get_all_manufacturers(\"Completed Vehicle\", 1) [ { \"Country\": \"UNITED STATES (USA)\", \"Mfr_CommonName\": \"Tesla\", \"Mfr_ID\": 955, \"Mfr_Name\": \"TESLA, INC.\", \"VehicleTypes\": [ { \"IsPrimary\": true, \"Name\": \"Passenger Car\" }, { \"IsPrimary\": false, \"Name\": \"Multipurpose Passenger Vehicle (MPV)\" } }, ... ] \"\"\" params = { \"ManufacturerType\" : manufacturer_type , \"page\" : page } return self . _request ( \"GetAllManufacturers\" , params ) get_canadian_vehicle_specifications ( self , year , make , model = None , units = 'Metric' ) Get original vehicle dimensions from the Canadian Vehicle Specification. The Canadian Vehicle Specifications (CVS) consists of a database of original vehicle dimensions, used primarily in collision investigation and reconstruction, combined with a search engine. The database is compiled annually by the Collision Investigation and Research Division of Transport Canada. See Canadian Vehicle Specifications . Parameters: Name Type Description Default year int 1971 or later required make str a make name like \"Honda\", \"Toyota\", ... required model str a model name like \"Pilot\", \"Focus\", ... None units str \"Metric\" or \"US\" 'Metric' Source code in vpic/client.py def get_canadian_vehicle_specifications ( self , year : int , make : str , model : str = None , units : str = \"Metric\" ) -> List [ Dict [ str , Any ]]: \"\"\"Get original vehicle dimensions from the Canadian Vehicle Specification. The Canadian Vehicle Specifications (CVS) consists of a database of original vehicle dimensions, used primarily in collision investigation and reconstruction, combined with a search engine. The database is compiled annually by the Collision Investigation and Research Division of Transport Canada. See [Canadian Vehicle Specifications](http://www.carsp.ca/research/resources /safety-sources/canadian-vehicle-specifications/). Args: year: 1971 or later make: a make name like \"Honda\", \"Toyota\", ... model: a model name like \"Pilot\", \"Focus\", ... units: \"Metric\" or \"US\" \"\"\" params = { \"Year\" : year , \"Make\" : make , \"Model\" : model , \"units\" : units } return self . _request ( \"GetCanadianVehicleSpecifications\" , params = params ) get_equipment_plant_codes ( self , year , equipment_type , report_type = 'All' ) Returns a list of plants that manufacture certain vehicle equipment. Plants have a unique three-character U.S. Department of Transportation (DOT) code. vPIC API documentation says this API only accepts 2016 and later. Parameters: Name Type Description Default year int must be 2016 or later required equipment_type int return plants that manufacture one of these equipment types: 1 = Tires; 3 = Brake Hoses; 13 = Glazing; 16 = Retread required report_type str must be one of New = plants whose code was assigned during the selected year Updated = plants whose data was modified during the selected year Closed = plants that are no longer active All = all active and closed plants, regardless of year 'All' Exceptions: Type Description ValueError if year is earlier than 2016 Examples: >>> get_equipment_plant_codes ( 2016 , 1 ) [ { \"Address\" : \"2950 INTERNATIONAL BLVD.\" , \"City\" : \"CLARKSVILLE\" , \"Country\" : \"USA\" , \"DOTCode\" : \"00T\" , \"Name\" : \"HANKOOK TIRE MANUFACTURING TENNESSEE, LP\" , \"OldDotCode\" : \"\" , \"PostalCode\" : \"37040\" , \"StateProvince\" : \"TENNESSEE\" , \"Status\" : \"Active\" }, ... ] Source code in vpic/client.py def get_equipment_plant_codes ( self , year : int , equipment_type : int , report_type : str = \"All\" ) -> List [ Dict [ str , Any ]]: \"\"\"Returns a list of plants that manufacture certain vehicle equipment. Plants have a unique three-character U.S. Department of Transportation (DOT) code. vPIC API documentation says this API only accepts 2016 and later. Args: year: must be 2016 or later equipment_type: return plants that manufacture one of these equipment types: 1 = Tires; 3 = Brake Hoses; 13 = Glazing; 16 = Retread report_type: must be one of New = plants whose code was assigned during the selected year Updated = plants whose data was modified during the selected year Closed = plants that are no longer active All = all active and closed plants, regardless of year Raises: ValueError: if ``year`` is earlier than 2016 Example: >>> get_equipment_plant_codes(2016, 1) [ { \"Address\": \"2950 INTERNATIONAL BLVD.\", \"City\": \"CLARKSVILLE\", \"Country\": \"USA\", \"DOTCode\": \"00T\", \"Name\": \"HANKOOK TIRE MANUFACTURING TENNESSEE, LP\", \"OldDotCode\": \"\", \"PostalCode\": \"37040\", \"StateProvince\": \"TENNESSEE\", \"Status\": \"Active\" }, ... ] \"\"\" if year < 2016 : raise ValueError ( \"Year must be 2016 or later\" ) params = { \"year\" : year , \"equipmentType\" : equipment_type , \"reportType\" : report_type , } return self . _request ( \"GetEquipmentPlantCodes\" , params ) get_makes_for_manufacturer ( self , manufacturer , model_year = None ) Returns makes produced by a manufacturer or manufacturers. Parameters: Name Type Description Default manufacturer Union[str, int] Pass the Manufacturer Id (int) or the complete manufacturer name (str) to return detail for a single manufacturer. Pass a partial name to return manufacturers with names that include the partial name. required model_year int Pass a model year to return only those makes made by the manufacturer for that model year. None Exceptions: Type Description ValueError if manufacturer is missing Examples: >>> get_makes_for_manufacturer ( 988 ) [ { \"MakeId\" : 474 , \"MakeName\" : \"HONDA\" , \"Mfr_Name\" : \"HONDA DEVELOPMENT & MANUFACTURING OF AMERICA, LLC\" }, { \"MakeId\" : 475 , \"MakeName\" : \"ACURA\" , \"Mfr_Name\" : \"HONDA DEVELOPMENT & MANUFACTURING OF AMERICA, LLC\" } ... ] Source code in vpic/client.py def get_makes_for_manufacturer ( self , manufacturer : Union [ str , int ], model_year : int = None ) -> List [ Dict [ str , Any ]]: \"\"\"Returns makes produced by a manufacturer or manufacturers. Args: manufacturer: Pass the Manufacturer Id (int) or the complete manufacturer name (str) to return detail for a single manufacturer. Pass a partial name to return manufacturers with names that include the partial name. model_year: Pass a model year to return only those makes made by the manufacturer for that model year. Raises: ValueError: if ``manufacturer`` is missing Examples: >>> get_makes_for_manufacturer(988) [ { \"MakeId\": 474, \"MakeName\": \"HONDA\", \"Mfr_Name\": \"HONDA DEVELOPMENT & MANUFACTURING OF AMERICA, LLC\" }, { \"MakeId\": 475, \"MakeName\": \"ACURA\", \"Mfr_Name\": \"HONDA DEVELOPMENT & MANUFACTURING OF AMERICA, LLC\" } ... ] \"\"\" if manufacturer is None : raise ValueError ( \"manufacturer is required\" ) if model_year : results = self . _request ( f \"GetMakesForManufacturerAndYear/ { manufacturer } \" , { \"year\" : model_year } ) else : results = self . _request ( f \"GetMakeForManufacturer/ { manufacturer } \" ) return results get_makes_for_vehicle_type ( self , vehicle_type ) Returns makes that produce a vehicle_type Parameters: Name Type Description Default vehicle_type str A vPIC vehicle_type. For example, \"Passenger Car\", \"Truck\", or \"Multipurpose Passenger Vehicle (MPV)\". If you pass a partial vehicle_type, for example \"Passenger\", results will include makes for all matching vehicle types. Matching is not case sensitive. required Exceptions: Type Description ValueError if vehicle_type is missing Examples: >>> get_makes_for_vehicle_type ( 'Car' ) [ { \"MakeId\" : 440 , \"MakeName\" : \"ASTON MARTIN\" , \"VehicleTypeId\" : 2 , \"VehicleTypeName\" : \"Passenger Car\" }, { \"MakeId\" : 441 , \"MakeName\" : \"TESLA\" , \"VehicleTypeId\" : 2 , \"VehicleTypeName\" : \"Passenger Car\" }, ... ] Source code in vpic/client.py def get_makes_for_vehicle_type ( self , vehicle_type : str ) -> List [ Dict [ str , Any ]]: \"\"\"Returns makes that produce a vehicle_type Args: vehicle_type: A vPIC vehicle_type. For example, \"Passenger Car\", \"Truck\", or \"Multipurpose Passenger Vehicle (MPV)\". If you pass a partial vehicle_type, for example \"Passenger\", results will include makes for all matching vehicle types. Matching is not case sensitive. Raises: ValueError: if ``vehicle_type`` is missing Examples: >>> get_makes_for_vehicle_type('Car') [ { \"MakeId\": 440, \"MakeName\": \"ASTON MARTIN\", \"VehicleTypeId\": 2, \"VehicleTypeName\": \"Passenger Car\" }, { \"MakeId\": 441, \"MakeName\": \"TESLA\", \"VehicleTypeId\": 2, \"VehicleTypeName\": \"Passenger Car\" }, ... ] \"\"\" if vehicle_type is None : raise ValueError ( \"vehicle_type is required\" ) return self . _request ( f \"GetMakesForVehicleType/ { vehicle_type . rstrip () } \" ) get_manufacturer_details ( self , manufacturer ) Returns details for one or more manufacturers. Parameters: Name Type Description Default manufacturer Union[str, int] Pass the Manufacturer Id (int) or the complete manufacturer name (str) to return detail for a single manufacturer. Pass a partial name to return manufacturers with names that include the partial name. required Examples: >>> get_manufacturer_details ( 988 ) [ { \"Address\" : \"1919 Torrance Blvd.\" , \"Address2\" : null , \"City\" : \"Torrance\" , \"ContactEmail\" : \"jeff_chang@ahm.honda.com\" , \"ContactFax\" : null , \"ContactPhone\" : \"(310)783-3401\" , \"Country\" : \"UNITED STATES (USA)\" , \"DBAs\" : \"...\" , \"EquipmentItems\" : [], \"LastUpdated\" : \"/Date(1618422117803-0400)/\" , \"ManufacturerTypes\" : [ { \"Name\" : \"Completed Vehicle Manufacturer\" } ], \"Mfr_CommonName\" : \"Honda\" , \"Mfr_ID\" : 988 , \"Mfr_Name\" : \"HONDA DEVELOPMENT & MANUFACTURING OF AMERICA, LLC\" , \"OtherManufacturerDetails\" : null , \"PostalCode\" : \"90501\" , \"PrimaryProduct\" : null , \"PrincipalFirstName\" : \"Shinji Aoyama\" , \"PrincipalLastName\" : null , \"PrincipalPosition\" : \"President & CEO\" , \"StateProvince\" : \"CALIFORNIA\" , \"SubmittedName\" : \"Wilson Tran\" , \"SubmittedOn\" : \"/Date(1618286400000-0400)/\" , \"SubmittedPosition\" : \"Sr. Specialist, II\" , \"VehicleTypes\" : [ { \"GVWRFrom\" : \"Class 1A: 3,000 lb or less (1,360 kg or less)\" , \"GVWRTo\" : \"Class 1D: 5,001 - 6,000 lb (2,268 - 2,722 kg)\" , \"IsPrimary\" : true , \"Name\" : \"Passenger Car\" }, { \"GVWRFrom\" : \"Class 2E: 6,001 - 7,000 lb (2,722 - 3,175 kg)\" , \"GVWRTo\" : \"Class 2E: 6,001 - 7,000 lb (2,722 - 3,175 kg)\" , \"IsPrimary\" : false , \"Name\" : \"Truck \" }, { \"GVWRFrom\" : \"Class 1B: 3,001 - 4,000 lb (1,360 - 1,814 kg)\" , \"GVWRTo\" : \"Class 2E: 6,001 - 7,000 lb (2,722 - 3,175 kg)\" , \"IsPrimary\" : false , \"Name\" : \"Multipurpose Passenger Vehicle (MPV)\" } ] } ... ] Source code in vpic/client.py def get_manufacturer_details ( self , manufacturer : Union [ str , int ] ) -> List [ Dict [ str , Any ]]: \"\"\"Returns details for one or more manufacturers. Args: manufacturer: Pass the Manufacturer Id (int) or the complete manufacturer name (str) to return detail for a single manufacturer. Pass a partial name to return manufacturers with names that include the partial name. Examples: >>> get_manufacturer_details(988) [ { \"Address\": \"1919 Torrance Blvd.\", \"Address2\": null, \"City\": \"Torrance\", \"ContactEmail\": \"jeff_chang@ahm.honda.com\", \"ContactFax\": null, \"ContactPhone\": \"(310)783-3401\", \"Country\": \"UNITED STATES (USA)\", \"DBAs\": \"...\", \"EquipmentItems\": [], \"LastUpdated\": \"/Date(1618422117803-0400)/\", \"ManufacturerTypes\": [ { \"Name\": \"Completed Vehicle Manufacturer\" } ], \"Mfr_CommonName\": \"Honda\", \"Mfr_ID\": 988, \"Mfr_Name\": \"HONDA DEVELOPMENT & MANUFACTURING OF AMERICA, LLC\", \"OtherManufacturerDetails\": null, \"PostalCode\": \"90501\", \"PrimaryProduct\": null, \"PrincipalFirstName\": \"Shinji Aoyama\", \"PrincipalLastName\": null, \"PrincipalPosition\": \"President & CEO\", \"StateProvince\": \"CALIFORNIA\", \"SubmittedName\": \"Wilson Tran\", \"SubmittedOn\": \"/Date(1618286400000-0400)/\", \"SubmittedPosition\": \"Sr. Specialist, II\", \"VehicleTypes\": [ { \"GVWRFrom\": \"Class 1A: 3,000 lb or less (1,360 kg or less)\", \"GVWRTo\": \"Class 1D: 5,001 - 6,000 lb (2,268 - 2,722 kg)\", \"IsPrimary\": true, \"Name\": \"Passenger Car\" }, { \"GVWRFrom\": \"Class 2E: 6,001 - 7,000 lb (2,722 - 3,175 kg)\", \"GVWRTo\": \"Class 2E: 6,001 - 7,000 lb (2,722 - 3,175 kg)\", \"IsPrimary\": false, \"Name\": \"Truck \" }, { \"GVWRFrom\": \"Class 1B: 3,001 - 4,000 lb (1,360 - 1,814 kg)\", \"GVWRTo\": \"Class 2E: 6,001 - 7,000 lb (2,722 - 3,175 kg)\", \"IsPrimary\": false, \"Name\": \"Multipurpose Passenger Vehicle (MPV)\" } ] } ... ] \"\"\" if manufacturer is None : raise ValueError ( \"manufacturer is required\" ) return self . _request ( f \"GetManufacturerDetails/ { manufacturer } \" ) get_models_for_make ( self , make , model_year = None , vehicle_type = None ) Return a list of models for a make or makes. Optionally filter the results by model year and vehicle type. Parameters: Name Type Description Default make Union[int, str] Pass the MakeId (int) or the complete make name (str) to return vehicle types for a single manufacturer. Pass a partial make name to return vehicle types for all makes that match the partial name. When you pass a make name, results will include the MakeId and MakeName because you may get vehicle_types for more than one make. required model_year int pass this to return models made in this model year None vehicle_type str one of the vPIC vehicle_types (for example, \"Passenger Car\", \"Truck\", or \"Multipurpose Passenger Vehicle (MPV)\") None Exceptions: Type Description ValueError if year is earlier than 2016 Examples: >>> get_models_for_make ( \"TESLA\" , model_year = 2020 ) [ { \"MakeId\" : 441 , \"MakeName\" : \"TESLA\" , \"ModelId\" : 1685 , \"ModelName\" : \"Model S\" }, { \"MakeId\" : 441 , \"MakeName\" : \"TESLA\" , \"ModelId\" : 10199 , \"ModelName\" : \"Model X\" }, { \"MakeId\" : 441 , \"MakeName\" : \"TESLA\" , \"ModelId\" : 17834 , \"ModelName\" : \"Model 3\" }, { \"MakeId\" : 441 , \"MakeName\" : \"TESLA\" , \"ModelId\" : 27027 , \"ModelName\" : \"Model Y\" } ] VehicleTypeId and VehicleTypeName are only returned when you specify vehicle_type. Source code in vpic/client.py def get_models_for_make ( self , make : Union [ int , str ], model_year : int = None , vehicle_type : str = None ) -> List [ Dict [ str , Any ]]: \"\"\"Return a list of models for a make or makes. Optionally filter the results by model year and vehicle type. Args: make: Pass the MakeId (int) or the complete make name (str) to return vehicle types for a single manufacturer. Pass a partial make name to return vehicle types for all makes that match the partial name. When you pass a make name, results will include the MakeId and MakeName because you may get vehicle_types for more than one make. model_year: pass this to return models made in this model year vehicle_type: one of the vPIC vehicle_types (for example, \"Passenger Car\", \"Truck\", or \"Multipurpose Passenger Vehicle (MPV)\") Raises: ValueError: if ``year`` is earlier than 2016 Examples: >>> get_models_for_make(\"TESLA\", model_year=2020) [ { \"MakeId\": 441, \"MakeName\": \"TESLA\", \"ModelId\": 1685, \"ModelName\": \"Model S\" }, { \"MakeId\": 441, \"MakeName\": \"TESLA\", \"ModelId\": 10199, \"ModelName\": \"Model X\" }, { \"MakeId\": 441, \"MakeName\": \"TESLA\", \"ModelId\": 17834, \"ModelName\": \"Model 3\" }, { \"MakeId\": 441, \"MakeName\": \"TESLA\", \"ModelId\": 27027, \"ModelName\": \"Model Y\" } ] VehicleTypeId and VehicleTypeName are only returned when you specify vehicle_type. \"\"\" if make is None : raise ValueError ( \"make is required\" ) if model_year or vehicle_type : my = f \"/modelyear/ { model_year } \" if model_year else \"\" vt = f \"/vehicletype/ { vehicle_type } \" if vehicle_type else \"\" if isinstance ( make , int ): endpoint = f \"GetModelsForMakeIdYear/makeId/ { make }{ my }{ vt } \" else : endpoint = f \"GetModelsForMakeYear/make/ { make }{ my }{ vt } \" else : if isinstance ( make , int ): endpoint = f \"GetModelsForMakeId/ { make } \" else : endpoint = f \"GetModelsForMake/ { make } \" return self . _request ( endpoint ) get_parts ( self , cfr_part , from_date , to_date , page = 1 ) Returns a list of vehicle documentation submitted by manufacturers. Manufacturers provide vehicle information to NHTSA to comply with these regulations: 49 CFR Part 565 (Vehicle Identification Number Guidance) 49 CFR Part 566 (Manufacturer Identification \u2013 Reporting Requirements) This provides a list of documents submitted in a date range. Up to 1,000 results will be returned at a time. Parameters: Name Type Description Default cfr_part str '565' to return 49 CFR Part 565 submissions; '566' to return 49 CFR Part 566 submissions required from_date str the beginning of the date range to search required end_date the end of the date range to search required page int results are paginated; this is page number to return 1 Exceptions: Type Description ValueError if cfr_part is missing Examples: >>> get_parts ( '565' , '2015-01-01' , '2015-05-05' , 1 ) [ { \"CoverLetterURL\" : \"\" , \"LetterDate\" : \"5/5/2015\" , \"ManufacturerId\" : 8012 , \"ManufacturerName\" : \"PORSCHE CARS NORTH AMERICA, INC.\" , \"ModelYearFrom\" : null , \"ModelYearTo\" : null , \"Name\" : \"ORG10658\" , \"Type\" : null , \"URL\" : \"http://vpic.nhtsa.dot.gov/mid/home/displayfile/[guid here]\" }, ... ] Source code in vpic/client.py def get_parts ( self , cfr_part : str , from_date : str , to_date : str , page : int = 1 ) -> List [ Dict [ str , Any ]]: \"\"\"Returns a list of vehicle documentation submitted by manufacturers. Manufacturers provide vehicle information to NHTSA to comply with these regulations: * 49 CFR Part 565 (Vehicle Identification Number Guidance) * 49 CFR Part 566 (Manufacturer Identification \u2013 Reporting Requirements) This provides a list of documents submitted in a date range. Up to 1,000 results will be returned at a time. Args: cfr_part: '565' to return 49 CFR Part 565 submissions; '566' to return 49 CFR Part 566 submissions from_date: the beginning of the date range to search end_date: the end of the date range to search page: results are paginated; this is page number to return Raises: ValueError: if ``cfr_part`` is missing Examples: >>> get_parts('565', '2015-01-01', '2015-05-05', 1) [ { \"CoverLetterURL\": \"\", \"LetterDate\": \"5/5/2015\", \"ManufacturerId\": 8012, \"ManufacturerName\": \"PORSCHE CARS NORTH AMERICA, INC.\", \"ModelYearFrom\": null, \"ModelYearTo\": null, \"Name\": \"ORG10658\", \"Type\": null, \"URL\": \"http://vpic.nhtsa.dot.gov/mid/home/displayfile/[guid here]\" }, ... ] \"\"\" if cfr_part is None : raise ValueError ( \"cfr_part is required\" ) params = { \"type\" : cfr_part , \"fromDate\" : from_date , \"toDate\" : to_date , \"page\" : page , } return self . _request ( \"GetParts\" , params ) get_vehicle_types_for_make ( self , make ) Returns vehicle types produced by a make or make Parameters: Name Type Description Default make Union[str, int] Pass the MakeId (int) or the complete make name (str) to return vehicle types for a single manufacturer. Pass a partial make name to return vehicle types for all makes that match the partial name. When you pass a make name, results will include the MakeId and MakeName because you may get vehicle_types for more than one make. required Exceptions: Type Description ValueError if make is missing Examples: >>> get_vehicle_types_for_make ( 474 ) [ { \"VehicleTypeId\" : 1 , \"VehicleTypeName\" : \"Motorcycle\" }, { \"VehicleTypeId\" : 2 , \"VehicleTypeName\" : \"Passenger Car\" }, { \"VehicleTypeId\" : 3 , \"VehicleTypeName\" : \"Truck \" }, { \"VehicleTypeId\" : 7 , \"VehicleTypeName\" : \"Multipurpose Passenger Vehicle (MPV)\" }, { \"VehicleTypeId\" : 9 , \"VehicleTypeName\" : \"Low Speed Vehicle (LSV)\" } ] >>> get_vehicle_types_for_make ( 'kia' ) [ { \"MakeId\" : 499 , \"MakeName\" : \"KIA\" , \"VehicleTypeId\" : 2 , \"VehicleTypeName\" : \"Passenger Car\" }, { \"MakeId\" : 499 , \"MakeName\" : \"KIA\" , \"VehicleTypeId\" : 7 , \"VehicleTypeName\" : \"Multipurpose Passenger Vehicle (MPV)\" }, { \"MakeId\" : 5848 , \"MakeName\" : \"MGS GRAND SPORT (MARDIKIAN)\" , \"VehicleTypeId\" : 2 , \"VehicleTypeName\" : \"Passenger Car\" } ] Source code in vpic/client.py def get_vehicle_types_for_make ( self , make : Union [ str , int ]) -> List [ Dict [ str , Any ]]: \"\"\"Returns vehicle types produced by a make or make Args: make: Pass the MakeId (int) or the complete make name (str) to return vehicle types for a single manufacturer. Pass a partial make name to return vehicle types for all makes that match the partial name. When you pass a make name, results will include the MakeId and MakeName because you may get vehicle_types for more than one make. Raises: ValueError: if ``make`` is missing Examples: >>> get_vehicle_types_for_make(474) [ { \"VehicleTypeId\": 1, \"VehicleTypeName\": \"Motorcycle\" }, { \"VehicleTypeId\": 2, \"VehicleTypeName\": \"Passenger Car\" }, { \"VehicleTypeId\": 3, \"VehicleTypeName\": \"Truck \" }, { \"VehicleTypeId\": 7, \"VehicleTypeName\": \"Multipurpose Passenger Vehicle (MPV)\" }, { \"VehicleTypeId\": 9, \"VehicleTypeName\": \"Low Speed Vehicle (LSV)\" } ] >>> get_vehicle_types_for_make('kia') [ { \"MakeId\": 499, \"MakeName\": \"KIA\", \"VehicleTypeId\": 2, \"VehicleTypeName\": \"Passenger Car\" }, { \"MakeId\": 499, \"MakeName\": \"KIA\", \"VehicleTypeId\": 7, \"VehicleTypeName\": \"Multipurpose Passenger Vehicle (MPV)\" }, { \"MakeId\": 5848, \"MakeName\": \"MGS GRAND SPORT (MARDIKIAN)\", \"VehicleTypeId\": 2, \"VehicleTypeName\": \"Passenger Car\" } ] \"\"\" if make is None : raise ValueError ( \"make is required\" ) if isinstance ( make , int ): return self . _request ( f \"GetVehicleTypesForMakeId/ { make } \" ) else : return self . _request ( f \"GetVehicleTypesForMake/ { make } \" ) get_vehicle_variable_list ( self ) Return a list of vehicle variables tracked by vPIC Examples: >>> get_vehicle_variable_list () [ { \"DataType\" : \"string\" , \"Description\" : \"<p>Any other battery information that does...\" , \"Id\" : 1 , \"Name\" : \"Other Battery Info\" }, { \"DataType\" : \"lookup\" , \"Description\" : \"<p>Battery type field stores the battery ...\" , \"Id\" : 2 , \"Name\" : \"Battery Type\" }, { \"DataType\" : \"lookup\" , \"Description\" : \"<p>Bed type is the type of bed (the open b...\" , \"Id\" : 3 , \"Name\" : \"Bed Type\" }, { \"DataType\" : \"lookup\" , \"Description\" : \"<p>Cab type applies to both pickup truck ...\" , \"Id\" : 4 , \"Name\" : \"Cab Type\" }, { \"DataType\" : \"lookup\" , \"Description\" : \"<p>Body Class presents the Body Type, bas...\" , \"Id\" : 5 , \"Name\" : \"Body Class\" }, ... ] Source code in vpic/client.py def get_vehicle_variable_list ( self ) -> List [ Dict [ str , Any ]]: \"\"\"Return a list of vehicle variables tracked by vPIC Examples: >>> get_vehicle_variable_list() [ { \"DataType\": \"string\", \"Description\": \"<p>Any other battery information that does...\", \"Id\": 1, \"Name\": \"Other Battery Info\" }, { \"DataType\": \"lookup\", \"Description\": \"<p>Battery type field stores the battery ...\", \"Id\": 2, \"Name\": \"Battery Type\" }, { \"DataType\": \"lookup\", \"Description\": \"<p>Bed type is the type of bed (the open b...\", \"Id\": 3, \"Name\": \"Bed Type\" }, { \"DataType\": \"lookup\", \"Description\": \"<p>Cab type applies to both pickup truck ...\", \"Id\": 4, \"Name\": \"Cab Type\" }, { \"DataType\": \"lookup\", \"Description\": \"<p>Body Class presents the Body Type, bas...\", \"Id\": 5, \"Name\": \"Body Class\" }, ... ] \"\"\" return self . _request ( \"GetVehicleVariableList\" ) get_vehicle_variable_values_list ( self , variable_name ) Return the values for a vehicle variable Parameters: Name Type Description Default variable_name str the name of the vehicle variable required Exceptions: Type Description ValueError if variable_name is missing Examples: >>> get_vehicle_variable_values_list ( \"Vehicle Type\" ) [ { \"ElementName\" : \"Vehicle Type\" , \"Id\" : 1 , \"Name\" : \"Motorcycle\" }, { \"ElementName\" : \"Vehicle Type\" , \"Id\" : 2 , \"Name\" : \"Passenger Car\" }, { \"ElementName\" : \"Vehicle Type\" , \"Id\" : 3 , \"Name\" : \"Truck \" }, { \"ElementName\" : \"Vehicle Type\" , \"Id\" : 5 , \"Name\" : \"Bus\" }, { \"ElementName\" : \"Vehicle Type\" , \"Id\" : 6 , \"Name\" : \"Trailer\" }, { \"ElementName\" : \"Vehicle Type\" , \"Id\" : 7 , \"Name\" : \"Multipurpose Passenger Vehicle (MPV)\" }, { \"ElementName\" : \"Vehicle Type\" , \"Id\" : 9 , \"Name\" : \"Low Speed Vehicle (LSV)\" }, { \"ElementName\" : \"Vehicle Type\" , \"Id\" : 10 , \"Name\" : \"Incomplete Vehicle\" }, { \"ElementName\" : \"Vehicle Type\" , \"Id\" : 13 , \"Name\" : \"Off Road Vehicle\" } ] Source code in vpic/client.py def get_vehicle_variable_values_list ( self , variable_name : str ) -> List [ Dict [ str , Any ]]: \"\"\"Return the values for a vehicle variable Args: variable_name: the name of the vehicle variable Raises: ValueError: if ``variable_name`` is missing Examples: >>> get_vehicle_variable_values_list(\"Vehicle Type\") [ { \"ElementName\": \"Vehicle Type\", \"Id\": 1, \"Name\": \"Motorcycle\" }, { \"ElementName\": \"Vehicle Type\", \"Id\": 2, \"Name\": \"Passenger Car\" }, { \"ElementName\": \"Vehicle Type\", \"Id\": 3, \"Name\": \"Truck \" }, { \"ElementName\": \"Vehicle Type\", \"Id\": 5, \"Name\": \"Bus\" }, { \"ElementName\": \"Vehicle Type\", \"Id\": 6, \"Name\": \"Trailer\" }, { \"ElementName\": \"Vehicle Type\", \"Id\": 7, \"Name\": \"Multipurpose Passenger Vehicle (MPV)\" }, { \"ElementName\": \"Vehicle Type\", \"Id\": 9, \"Name\": \"Low Speed Vehicle (LSV)\" }, { \"ElementName\": \"Vehicle Type\", \"Id\": 10, \"Name\": \"Incomplete Vehicle\" }, { \"ElementName\": \"Vehicle Type\", \"Id\": 13, \"Name\": \"Off Road Vehicle\" } ] \"\"\" if variable_name is None : raise ValueError ( \"variable_name is required\" ) return self . _request ( f \"GetVehicleVariableValuesList/ { variable_name } \" ) get_wmis_for_manufacturer ( self , manufacturer = None , vehicle_type = None ) Returns the WMIs for one or all manufacturers You must pass one or both of provide manufacturer or vehicle_type. Parameters: Name Type Description Default manufacturer Union[str, int] Pass the Manufacturer Id (int) or the complete manufacturer name (str) to return WMIs for a single manufacturer. Pass a partial name to return WMIs for all manufacturers with names that include the partial name. None vehicle_type Union[str, int] Pass the vehicle_type Id (int) or complete vehicle_type name to return WMIs for that vehicle_type. Pass a partial name to return WMIs for vehicle_types matching that name. None Exceptions: Type Description ValueError if manufacturer and vehicle_type are missing Examples: >>> get_wmis_for_manufacturer ( 'Honda' ) [ { \"Country\" : null , \"CreatedOn\" : \"2015-03-26\" , \"DateAvailableToPublic\" : \"2015-01-01\" , \"Id\" : 987 , \"Name\" : \"HONDA MOTOR CO., LTD\" , \"UpdatedOn\" : \"2015-06-04\" , \"VehicleType\" : \"Passenger Car\" , \"WMI\" : \"JHM\" }, ... ] Source code in vpic/client.py def get_wmis_for_manufacturer ( self , manufacturer : Optional [ Union [ str , int ]] = None , vehicle_type : Optional [ Union [ str , int ]] = None , ) -> List [ Dict [ str , Any ]]: \"\"\"Returns the WMIs for one or all manufacturers You must pass one or both of provide manufacturer or vehicle_type. Args: manufacturer: Pass the Manufacturer Id (int) or the complete manufacturer name (str) to return WMIs for a single manufacturer. Pass a partial name to return WMIs for all manufacturers with names that include the partial name. vehicle_type: Pass the vehicle_type Id (int) or complete vehicle_type name to return WMIs for that vehicle_type. Pass a partial name to return WMIs for vehicle_types matching that name. Raises: ValueError: if ``manufacturer`` and ``vehicle_type`` are missing Examples: >>> get_wmis_for_manufacturer('Honda') [ { \"Country\": null, \"CreatedOn\": \"2015-03-26\", \"DateAvailableToPublic\": \"2015-01-01\", \"Id\": 987, \"Name\": \"HONDA MOTOR CO., LTD\", \"UpdatedOn\": \"2015-06-04\", \"VehicleType\": \"Passenger Car\", \"WMI\": \"JHM\" }, ... ] \"\"\" if manufacturer is None and vehicle_type is None : raise ValueError ( \"manufacturer or vehicle_type is required\" ) if manufacturer is None : endpoint = \"GetWMIsForManufacturer\" else : endpoint = f \"GetWMIsForManufacturer/ { manufacturer } \" params = {} if vehicle_type : params [ \"vehicleType\" ] = vehicle_type wmis = self . _request ( endpoint , params ) # for wmi in wmis: # wmi[\"ManufacturerId\"] = wmi[\"Id\"] # del wmi[\"Id\"] # wmi[\"Manufacturer\"] = wmi[\"Name\"] # del wmi[\"Name\"] return wmis","title":"Client"},{"location":"client.html#client-module","text":"","title":"Client module"},{"location":"client.html#vpic.client.Client","text":"A client library for the U.S. NHTSA vPIC API Client returns JSON responses from the vPIC API. vPIC responses don't always use the same name for a variable, so by default this library standardizes variable names. You can disable this by creating a client like this: ``c = Client(standardize_names=False)`` If you prefer to receive model objects instead of JSON responses, use vpic.Client instead. A client library for the United States National Highway Traffic Safety Administration (NHTSA) Vehicle Product Information Catalog (vPIC) Vehicle Listing API. Use this to gather information on vehicles and their specifications, and to decode VINs to extract information for specific vehicles. vPIC has information about these types of vehicles sold or imported in the USA: Bus Incomplete Vehicle Low Speed Vehicle (LSV) Motorcycle Multipurpose Passenger Vehicle (MPV) Passenger Car Trailer Truck vPIC has all of the information about how manufacturers assign a VIN that encodes the vehicles characteristics. Vehicle manufacturers provide this information to NHTSA under U.S. law 49 CFR Part 565. The API available 24/7, is free to use, and does not require registration. NHTSA uses automatic traffic rate controls to maintain the performance of the API and their websites that use the API. See https://vpic.nhtsa.dot.gov/api for more on the API. Attributes: Name Type Description host Hostname, including http(s)://, of the vPIC instance to query. standardize_variables vPIC uses different names for the same variable, so this client standarizes those names by default. Set this to False to receive the raw vPIC response.","title":"Client"},{"location":"client.html#vpic.client.Client.decode_vin","text":"Decode a 17-digit Vehicle Identification Number (VIN) or partial VIN. Decode the make, model, series, trim, and other vehicle information from VIN. Model year is required for pre-1980 vehicles, though vPIC recommends that you always pass it. If you don't have a complete 17-digit VIN, you can pass a partial VIN, using asterisk (*) for missing characters. The VIN check digit (the 9th character) isn't required for partial VINs. The shorter the partial VIN, the less vehicle information you'll receive in the response. See get_vehicle_variable_list for the variables returned here. Parameters: Name Type Description Default vin str A 17-digit VIN or partial VIN. Use asterisk for missing characters. required model_year int The vehicle's model year. Recommended, but not required. None extend If True, response will include variables for other NHTSA programs like NCSA. Defaults to False. False flatten True to receive vehicle variables in key-value pairs (this is the default and usually best choice). False to receive them as a list of variable objects that include the variable ID. True Exceptions: Type Description ValueError if vin is missing or isn't 6 to 17 characters long. ValueError if model_year is earlier than 1981. Source code in vpic/client.py def decode_vin ( self , vin : str , model_year : int = None , extend = False , flatten = True ) -> Dict [ str , Any ]: \"\"\"Decode a 17-digit Vehicle Identification Number (VIN) or partial VIN. Decode the make, model, series, trim, and other vehicle information from VIN. Model year is required for pre-1980 vehicles, though vPIC recommends that you always pass it. If you don't have a complete 17-digit VIN, you can pass a partial VIN, using asterisk (*) for missing characters. The VIN check digit (the 9th character) isn't required for partial VINs. The shorter the partial VIN, the less vehicle information you'll receive in the response. See get_vehicle_variable_list for the variables returned here. Args: vin: A 17-digit VIN or partial VIN. Use asterisk for missing characters. model_year: The vehicle's model year. Recommended, but not required. extend: If True, response will include variables for other NHTSA programs like NCSA. Defaults to False. flatten: True to receive vehicle variables in key-value pairs (this is the default and usually best choice). False to receive them as a list of variable objects that include the variable ID. Raises: ValueError: if ``vin`` is missing or isn't 6 to 17 characters long. ValueError: if ``model_year`` is earlier than 1981. \"\"\" if vin is None : raise ValueError ( \"vin is required\" ) if not len ( vin ) in range ( 6 , 17 + 1 ): raise ValueError ( \"vin must be at least 6 characters and at most 17 characters\" ) if model_year and model_year < 1981 : raise ValueError ( \"model year must be 1981 or later\" ) endpoint = \"DecodeVin\" if flatten : endpoint = \"DecodeVinValues\" if extend : endpoint = f \" { endpoint } Extended\" if model_year is not None : params = { \"modelyear\" : model_year } else : params = {} results = self . _request ( f \" { endpoint } / { vin } \" , params ) return results [ 0 ] if flatten else results","title":"decode_vin()"},{"location":"client.html#vpic.client.Client.decode_vin_batch","text":"Decode a batch of 17-digit VINs or partial VINs. Model year is required for pre-1980 vehicles, though vPIC recommends that you always pass it. If you don't have a complete 17-digit VIN, you can pass a partial VIN, using asterisk (*) for missing characters. The VIN check digit (the 9th character) isn't required for partial VINs. The shorter the partial VIN, the less vehicle information you'll receive in the response. Vehicle variables will be returned in key-value pairs, the same format returned by decode_vin(.., flatten=True). See get_vehicle_variable_list for the variables returned here. Parameters: Name Type Description Default vins List[str] A list of 17-digit VIN or partial VINs and optional model year. Use asterisk for missing characters. For example: [\"VIN, model_year\", \"VIN, model_year\", ...] required Exceptions: Type Description ValueError if vin is missing or isn't 6 to 17 characters long. ValueError if model_year is earlier than 1981. Source code in vpic/client.py def decode_vin_batch ( self , vins : List [ str ]) -> List [ Dict [ str , Any ]]: \"\"\"Decode a batch of 17-digit VINs or partial VINs. Model year is required for pre-1980 vehicles, though vPIC recommends that you always pass it. If you don't have a complete 17-digit VIN, you can pass a partial VIN, using asterisk (*) for missing characters. The VIN check digit (the 9th character) isn't required for partial VINs. The shorter the partial VIN, the less vehicle information you'll receive in the response. Vehicle variables will be returned in key-value pairs, the same format returned by decode_vin(.., flatten=True). See get_vehicle_variable_list for the variables returned here. Args: vins: A list of 17-digit VIN or partial VINs and optional model year. Use asterisk for missing characters. For example: [\"VIN, model_year\", \"VIN, model_year\", ...] Raises: ValueError: if ``vin`` is missing or isn't 6 to 17 characters long. ValueError: if ``model_year`` is earlier than 1981. \"\"\" if vins is None : raise ValueError ( \"vins is required\" ) if not len ( vins ) in range ( 1 , 50 + 1 ): raise ValueError ( \"pass at least one VIN, and at most 50 VINs\" ) return self . _request_post ( \"DecodeVINValuesBatch\" , data = { \"DATA\" : \";\" . join ( vins )})","title":"decode_vin_batch()"},{"location":"client.html#vpic.client.Client.decode_wmi","text":"Decode a WMI to get manufacturer information Provides information on the World Manufacturer Identifier for a specific WMI code. Parameters: Name Type Description Default wmi str A 3-character or 6-character World Manufacturer Index code. Large volume manufacturers usually have a 3 character WMI representing positions 1 to 3 (\"JTD\") of a VIN. Smaller manufacturers have a 6 character WMI representing positions 1 to 3 and 12 to 14 of a VIN. required Exceptions: Type Description ValueError if wmi is missing or isn't 3 or 6 characters long. Examples: >>> decode_wmi ( '1FT' ) { \"CommonName\" : \"Ford\" , \"CreatedOn\" : \"2015-03-23\" , \"DateAvailableToPublic\" : \"2015-01-01\" , \"MakeName\" : \"FORD\" , \"ManufacturerName\" : \"FORD MOTOR COMPANY, USA\" , \"ParentCompanyName\" : \"\" , \"URL\" : \"http://www.ford.com/\" , \"UpdatedOn\" : null , \"VehicleType\" : \"Truck \" , } Source code in vpic/client.py def decode_wmi ( self , wmi : str ) -> Dict [ str , Any ]: \"\"\"Decode a WMI to get manufacturer information Provides information on the World Manufacturer Identifier for a specific WMI code. Args: wmi: A 3-character or 6-character World Manufacturer Index code. Large volume manufacturers usually have a 3 character WMI representing positions 1 to 3 (\"JTD\") of a VIN. Smaller manufacturers have a 6 character WMI representing positions 1 to 3 and 12 to 14 of a VIN. Raises: ValueError: if ``wmi`` is missing or isn't 3 or 6 characters long. Example: >>> decode_wmi('1FT') { \"CommonName\": \"Ford\", \"CreatedOn\": \"2015-03-23\", \"DateAvailableToPublic\": \"2015-01-01\", \"MakeName\": \"FORD\", \"ManufacturerName\": \"FORD MOTOR COMPANY, USA\", \"ParentCompanyName\": \"\", \"URL\": \"http://www.ford.com/\", \"UpdatedOn\": null, \"VehicleType\": \"Truck \", } \"\"\" if not len ( wmi ) in [ 3 , 6 ]: raise ValueError ( \"WMI must be 3 or 6 characters\" ) result = self . _request ( f \"DecodeWMI/ { wmi } \" )[ 0 ] # result[\"WMI\"] = wmi return result","title":"decode_wmi()"},{"location":"client.html#vpic.client.Client.get_all_makes","text":"Returns all of the makes registered with vPIC. Examples: >>> get_all_makes () [ { \"MakeId\" : 440 , \"MakeName\" : \"ASTON MARTIN\" }, { \"MakeId\" : 441 , \"MakeName\" : \"TESLA\" }, { \"MakeId\" : 442 , \"MakeName\" : \"JAGUAR\" }, ... ] Source code in vpic/client.py def get_all_makes ( self ) -> List [ Dict [ str , Any ]]: \"\"\"Returns all of the makes registered with vPIC. Examples: >>> get_all_makes() [ { \"MakeId\": 440, \"MakeName\": \"ASTON MARTIN\" }, { \"MakeId\": 441, \"MakeName\": \"TESLA\" }, { \"MakeId\": 442, \"MakeName\": \"JAGUAR\" }, ... ] \"\"\" return self . _request ( \"GetAllMakes\" )","title":"get_all_makes()"},{"location":"client.html#vpic.client.Client.get_all_manufacturers","text":"Return a list of vPIC manufacturers of the given manufacturer_type. This provides a list of all the Manufacturers available in vPIC Dataset. See get_vehicle_variable_values_list(\"Manufacturer Type\") for the list of manufacturer types. Parameters: Name Type Description Default manufacturer_type str The manufacturer type, which is Incomplete Vehicles, Completed Vehicle Manufacturer, Incomplete Vehicle Manufacturer, Intermediate Manufacturer, Final-Stage Manufacturer, Alterer, Replica Vehicle Manufacturer. You can pass the full type name, or a substring of the type. None page int results are paginated; this is the page number to return 1 Examples: >>> get_all_manufacturers ( \"Completed Vehicle\" , 1 ) [ { \"Country\" : \"UNITED STATES (USA)\" , \"Mfr_CommonName\" : \"Tesla\" , \"Mfr_ID\" : 955 , \"Mfr_Name\" : \"TESLA, INC.\" , \"VehicleTypes\" : [ { \"IsPrimary\" : true , \"Name\" : \"Passenger Car\" }, { \"IsPrimary\" : false , \"Name\" : \"Multipurpose Passenger Vehicle (MPV)\" } }, ... ] Source code in vpic/client.py def get_all_manufacturers ( self , manufacturer_type : str = None , page : int = 1 ) -> List [ Dict [ str , Any ]]: \"\"\"Return a list of vPIC manufacturers of the given manufacturer_type. This provides a list of all the Manufacturers available in vPIC Dataset. See ``get_vehicle_variable_values_list(\"Manufacturer Type\")`` for the list of manufacturer types. Args: manufacturer_type: The manufacturer type, which is Incomplete Vehicles, Completed Vehicle Manufacturer, Incomplete Vehicle Manufacturer, Intermediate Manufacturer, Final-Stage Manufacturer, Alterer, Replica Vehicle Manufacturer. You can pass the full type name, or a substring of the type. page: results are paginated; this is the page number to return Examples: >>> get_all_manufacturers(\"Completed Vehicle\", 1) [ { \"Country\": \"UNITED STATES (USA)\", \"Mfr_CommonName\": \"Tesla\", \"Mfr_ID\": 955, \"Mfr_Name\": \"TESLA, INC.\", \"VehicleTypes\": [ { \"IsPrimary\": true, \"Name\": \"Passenger Car\" }, { \"IsPrimary\": false, \"Name\": \"Multipurpose Passenger Vehicle (MPV)\" } }, ... ] \"\"\" params = { \"ManufacturerType\" : manufacturer_type , \"page\" : page } return self . _request ( \"GetAllManufacturers\" , params )","title":"get_all_manufacturers()"},{"location":"client.html#vpic.client.Client.get_canadian_vehicle_specifications","text":"Get original vehicle dimensions from the Canadian Vehicle Specification. The Canadian Vehicle Specifications (CVS) consists of a database of original vehicle dimensions, used primarily in collision investigation and reconstruction, combined with a search engine. The database is compiled annually by the Collision Investigation and Research Division of Transport Canada. See Canadian Vehicle Specifications . Parameters: Name Type Description Default year int 1971 or later required make str a make name like \"Honda\", \"Toyota\", ... required model str a model name like \"Pilot\", \"Focus\", ... None units str \"Metric\" or \"US\" 'Metric' Source code in vpic/client.py def get_canadian_vehicle_specifications ( self , year : int , make : str , model : str = None , units : str = \"Metric\" ) -> List [ Dict [ str , Any ]]: \"\"\"Get original vehicle dimensions from the Canadian Vehicle Specification. The Canadian Vehicle Specifications (CVS) consists of a database of original vehicle dimensions, used primarily in collision investigation and reconstruction, combined with a search engine. The database is compiled annually by the Collision Investigation and Research Division of Transport Canada. See [Canadian Vehicle Specifications](http://www.carsp.ca/research/resources /safety-sources/canadian-vehicle-specifications/). Args: year: 1971 or later make: a make name like \"Honda\", \"Toyota\", ... model: a model name like \"Pilot\", \"Focus\", ... units: \"Metric\" or \"US\" \"\"\" params = { \"Year\" : year , \"Make\" : make , \"Model\" : model , \"units\" : units } return self . _request ( \"GetCanadianVehicleSpecifications\" , params = params )","title":"get_canadian_vehicle_specifications()"},{"location":"client.html#vpic.client.Client.get_equipment_plant_codes","text":"Returns a list of plants that manufacture certain vehicle equipment. Plants have a unique three-character U.S. Department of Transportation (DOT) code. vPIC API documentation says this API only accepts 2016 and later. Parameters: Name Type Description Default year int must be 2016 or later required equipment_type int return plants that manufacture one of these equipment types: 1 = Tires; 3 = Brake Hoses; 13 = Glazing; 16 = Retread required report_type str must be one of New = plants whose code was assigned during the selected year Updated = plants whose data was modified during the selected year Closed = plants that are no longer active All = all active and closed plants, regardless of year 'All' Exceptions: Type Description ValueError if year is earlier than 2016 Examples: >>> get_equipment_plant_codes ( 2016 , 1 ) [ { \"Address\" : \"2950 INTERNATIONAL BLVD.\" , \"City\" : \"CLARKSVILLE\" , \"Country\" : \"USA\" , \"DOTCode\" : \"00T\" , \"Name\" : \"HANKOOK TIRE MANUFACTURING TENNESSEE, LP\" , \"OldDotCode\" : \"\" , \"PostalCode\" : \"37040\" , \"StateProvince\" : \"TENNESSEE\" , \"Status\" : \"Active\" }, ... ] Source code in vpic/client.py def get_equipment_plant_codes ( self , year : int , equipment_type : int , report_type : str = \"All\" ) -> List [ Dict [ str , Any ]]: \"\"\"Returns a list of plants that manufacture certain vehicle equipment. Plants have a unique three-character U.S. Department of Transportation (DOT) code. vPIC API documentation says this API only accepts 2016 and later. Args: year: must be 2016 or later equipment_type: return plants that manufacture one of these equipment types: 1 = Tires; 3 = Brake Hoses; 13 = Glazing; 16 = Retread report_type: must be one of New = plants whose code was assigned during the selected year Updated = plants whose data was modified during the selected year Closed = plants that are no longer active All = all active and closed plants, regardless of year Raises: ValueError: if ``year`` is earlier than 2016 Example: >>> get_equipment_plant_codes(2016, 1) [ { \"Address\": \"2950 INTERNATIONAL BLVD.\", \"City\": \"CLARKSVILLE\", \"Country\": \"USA\", \"DOTCode\": \"00T\", \"Name\": \"HANKOOK TIRE MANUFACTURING TENNESSEE, LP\", \"OldDotCode\": \"\", \"PostalCode\": \"37040\", \"StateProvince\": \"TENNESSEE\", \"Status\": \"Active\" }, ... ] \"\"\" if year < 2016 : raise ValueError ( \"Year must be 2016 or later\" ) params = { \"year\" : year , \"equipmentType\" : equipment_type , \"reportType\" : report_type , } return self . _request ( \"GetEquipmentPlantCodes\" , params )","title":"get_equipment_plant_codes()"},{"location":"client.html#vpic.client.Client.get_makes_for_manufacturer","text":"Returns makes produced by a manufacturer or manufacturers. Parameters: Name Type Description Default manufacturer Union[str, int] Pass the Manufacturer Id (int) or the complete manufacturer name (str) to return detail for a single manufacturer. Pass a partial name to return manufacturers with names that include the partial name. required model_year int Pass a model year to return only those makes made by the manufacturer for that model year. None Exceptions: Type Description ValueError if manufacturer is missing Examples: >>> get_makes_for_manufacturer ( 988 ) [ { \"MakeId\" : 474 , \"MakeName\" : \"HONDA\" , \"Mfr_Name\" : \"HONDA DEVELOPMENT & MANUFACTURING OF AMERICA, LLC\" }, { \"MakeId\" : 475 , \"MakeName\" : \"ACURA\" , \"Mfr_Name\" : \"HONDA DEVELOPMENT & MANUFACTURING OF AMERICA, LLC\" } ... ] Source code in vpic/client.py def get_makes_for_manufacturer ( self , manufacturer : Union [ str , int ], model_year : int = None ) -> List [ Dict [ str , Any ]]: \"\"\"Returns makes produced by a manufacturer or manufacturers. Args: manufacturer: Pass the Manufacturer Id (int) or the complete manufacturer name (str) to return detail for a single manufacturer. Pass a partial name to return manufacturers with names that include the partial name. model_year: Pass a model year to return only those makes made by the manufacturer for that model year. Raises: ValueError: if ``manufacturer`` is missing Examples: >>> get_makes_for_manufacturer(988) [ { \"MakeId\": 474, \"MakeName\": \"HONDA\", \"Mfr_Name\": \"HONDA DEVELOPMENT & MANUFACTURING OF AMERICA, LLC\" }, { \"MakeId\": 475, \"MakeName\": \"ACURA\", \"Mfr_Name\": \"HONDA DEVELOPMENT & MANUFACTURING OF AMERICA, LLC\" } ... ] \"\"\" if manufacturer is None : raise ValueError ( \"manufacturer is required\" ) if model_year : results = self . _request ( f \"GetMakesForManufacturerAndYear/ { manufacturer } \" , { \"year\" : model_year } ) else : results = self . _request ( f \"GetMakeForManufacturer/ { manufacturer } \" ) return results","title":"get_makes_for_manufacturer()"},{"location":"client.html#vpic.client.Client.get_makes_for_vehicle_type","text":"Returns makes that produce a vehicle_type Parameters: Name Type Description Default vehicle_type str A vPIC vehicle_type. For example, \"Passenger Car\", \"Truck\", or \"Multipurpose Passenger Vehicle (MPV)\". If you pass a partial vehicle_type, for example \"Passenger\", results will include makes for all matching vehicle types. Matching is not case sensitive. required Exceptions: Type Description ValueError if vehicle_type is missing Examples: >>> get_makes_for_vehicle_type ( 'Car' ) [ { \"MakeId\" : 440 , \"MakeName\" : \"ASTON MARTIN\" , \"VehicleTypeId\" : 2 , \"VehicleTypeName\" : \"Passenger Car\" }, { \"MakeId\" : 441 , \"MakeName\" : \"TESLA\" , \"VehicleTypeId\" : 2 , \"VehicleTypeName\" : \"Passenger Car\" }, ... ] Source code in vpic/client.py def get_makes_for_vehicle_type ( self , vehicle_type : str ) -> List [ Dict [ str , Any ]]: \"\"\"Returns makes that produce a vehicle_type Args: vehicle_type: A vPIC vehicle_type. For example, \"Passenger Car\", \"Truck\", or \"Multipurpose Passenger Vehicle (MPV)\". If you pass a partial vehicle_type, for example \"Passenger\", results will include makes for all matching vehicle types. Matching is not case sensitive. Raises: ValueError: if ``vehicle_type`` is missing Examples: >>> get_makes_for_vehicle_type('Car') [ { \"MakeId\": 440, \"MakeName\": \"ASTON MARTIN\", \"VehicleTypeId\": 2, \"VehicleTypeName\": \"Passenger Car\" }, { \"MakeId\": 441, \"MakeName\": \"TESLA\", \"VehicleTypeId\": 2, \"VehicleTypeName\": \"Passenger Car\" }, ... ] \"\"\" if vehicle_type is None : raise ValueError ( \"vehicle_type is required\" ) return self . _request ( f \"GetMakesForVehicleType/ { vehicle_type . rstrip () } \" )","title":"get_makes_for_vehicle_type()"},{"location":"client.html#vpic.client.Client.get_manufacturer_details","text":"Returns details for one or more manufacturers. Parameters: Name Type Description Default manufacturer Union[str, int] Pass the Manufacturer Id (int) or the complete manufacturer name (str) to return detail for a single manufacturer. Pass a partial name to return manufacturers with names that include the partial name. required Examples: >>> get_manufacturer_details ( 988 ) [ { \"Address\" : \"1919 Torrance Blvd.\" , \"Address2\" : null , \"City\" : \"Torrance\" , \"ContactEmail\" : \"jeff_chang@ahm.honda.com\" , \"ContactFax\" : null , \"ContactPhone\" : \"(310)783-3401\" , \"Country\" : \"UNITED STATES (USA)\" , \"DBAs\" : \"...\" , \"EquipmentItems\" : [], \"LastUpdated\" : \"/Date(1618422117803-0400)/\" , \"ManufacturerTypes\" : [ { \"Name\" : \"Completed Vehicle Manufacturer\" } ], \"Mfr_CommonName\" : \"Honda\" , \"Mfr_ID\" : 988 , \"Mfr_Name\" : \"HONDA DEVELOPMENT & MANUFACTURING OF AMERICA, LLC\" , \"OtherManufacturerDetails\" : null , \"PostalCode\" : \"90501\" , \"PrimaryProduct\" : null , \"PrincipalFirstName\" : \"Shinji Aoyama\" , \"PrincipalLastName\" : null , \"PrincipalPosition\" : \"President & CEO\" , \"StateProvince\" : \"CALIFORNIA\" , \"SubmittedName\" : \"Wilson Tran\" , \"SubmittedOn\" : \"/Date(1618286400000-0400)/\" , \"SubmittedPosition\" : \"Sr. Specialist, II\" , \"VehicleTypes\" : [ { \"GVWRFrom\" : \"Class 1A: 3,000 lb or less (1,360 kg or less)\" , \"GVWRTo\" : \"Class 1D: 5,001 - 6,000 lb (2,268 - 2,722 kg)\" , \"IsPrimary\" : true , \"Name\" : \"Passenger Car\" }, { \"GVWRFrom\" : \"Class 2E: 6,001 - 7,000 lb (2,722 - 3,175 kg)\" , \"GVWRTo\" : \"Class 2E: 6,001 - 7,000 lb (2,722 - 3,175 kg)\" , \"IsPrimary\" : false , \"Name\" : \"Truck \" }, { \"GVWRFrom\" : \"Class 1B: 3,001 - 4,000 lb (1,360 - 1,814 kg)\" , \"GVWRTo\" : \"Class 2E: 6,001 - 7,000 lb (2,722 - 3,175 kg)\" , \"IsPrimary\" : false , \"Name\" : \"Multipurpose Passenger Vehicle (MPV)\" } ] } ... ] Source code in vpic/client.py def get_manufacturer_details ( self , manufacturer : Union [ str , int ] ) -> List [ Dict [ str , Any ]]: \"\"\"Returns details for one or more manufacturers. Args: manufacturer: Pass the Manufacturer Id (int) or the complete manufacturer name (str) to return detail for a single manufacturer. Pass a partial name to return manufacturers with names that include the partial name. Examples: >>> get_manufacturer_details(988) [ { \"Address\": \"1919 Torrance Blvd.\", \"Address2\": null, \"City\": \"Torrance\", \"ContactEmail\": \"jeff_chang@ahm.honda.com\", \"ContactFax\": null, \"ContactPhone\": \"(310)783-3401\", \"Country\": \"UNITED STATES (USA)\", \"DBAs\": \"...\", \"EquipmentItems\": [], \"LastUpdated\": \"/Date(1618422117803-0400)/\", \"ManufacturerTypes\": [ { \"Name\": \"Completed Vehicle Manufacturer\" } ], \"Mfr_CommonName\": \"Honda\", \"Mfr_ID\": 988, \"Mfr_Name\": \"HONDA DEVELOPMENT & MANUFACTURING OF AMERICA, LLC\", \"OtherManufacturerDetails\": null, \"PostalCode\": \"90501\", \"PrimaryProduct\": null, \"PrincipalFirstName\": \"Shinji Aoyama\", \"PrincipalLastName\": null, \"PrincipalPosition\": \"President & CEO\", \"StateProvince\": \"CALIFORNIA\", \"SubmittedName\": \"Wilson Tran\", \"SubmittedOn\": \"/Date(1618286400000-0400)/\", \"SubmittedPosition\": \"Sr. Specialist, II\", \"VehicleTypes\": [ { \"GVWRFrom\": \"Class 1A: 3,000 lb or less (1,360 kg or less)\", \"GVWRTo\": \"Class 1D: 5,001 - 6,000 lb (2,268 - 2,722 kg)\", \"IsPrimary\": true, \"Name\": \"Passenger Car\" }, { \"GVWRFrom\": \"Class 2E: 6,001 - 7,000 lb (2,722 - 3,175 kg)\", \"GVWRTo\": \"Class 2E: 6,001 - 7,000 lb (2,722 - 3,175 kg)\", \"IsPrimary\": false, \"Name\": \"Truck \" }, { \"GVWRFrom\": \"Class 1B: 3,001 - 4,000 lb (1,360 - 1,814 kg)\", \"GVWRTo\": \"Class 2E: 6,001 - 7,000 lb (2,722 - 3,175 kg)\", \"IsPrimary\": false, \"Name\": \"Multipurpose Passenger Vehicle (MPV)\" } ] } ... ] \"\"\" if manufacturer is None : raise ValueError ( \"manufacturer is required\" ) return self . _request ( f \"GetManufacturerDetails/ { manufacturer } \" )","title":"get_manufacturer_details()"},{"location":"client.html#vpic.client.Client.get_models_for_make","text":"Return a list of models for a make or makes. Optionally filter the results by model year and vehicle type. Parameters: Name Type Description Default make Union[int, str] Pass the MakeId (int) or the complete make name (str) to return vehicle types for a single manufacturer. Pass a partial make name to return vehicle types for all makes that match the partial name. When you pass a make name, results will include the MakeId and MakeName because you may get vehicle_types for more than one make. required model_year int pass this to return models made in this model year None vehicle_type str one of the vPIC vehicle_types (for example, \"Passenger Car\", \"Truck\", or \"Multipurpose Passenger Vehicle (MPV)\") None Exceptions: Type Description ValueError if year is earlier than 2016 Examples: >>> get_models_for_make ( \"TESLA\" , model_year = 2020 ) [ { \"MakeId\" : 441 , \"MakeName\" : \"TESLA\" , \"ModelId\" : 1685 , \"ModelName\" : \"Model S\" }, { \"MakeId\" : 441 , \"MakeName\" : \"TESLA\" , \"ModelId\" : 10199 , \"ModelName\" : \"Model X\" }, { \"MakeId\" : 441 , \"MakeName\" : \"TESLA\" , \"ModelId\" : 17834 , \"ModelName\" : \"Model 3\" }, { \"MakeId\" : 441 , \"MakeName\" : \"TESLA\" , \"ModelId\" : 27027 , \"ModelName\" : \"Model Y\" } ] VehicleTypeId and VehicleTypeName are only returned when you specify vehicle_type. Source code in vpic/client.py def get_models_for_make ( self , make : Union [ int , str ], model_year : int = None , vehicle_type : str = None ) -> List [ Dict [ str , Any ]]: \"\"\"Return a list of models for a make or makes. Optionally filter the results by model year and vehicle type. Args: make: Pass the MakeId (int) or the complete make name (str) to return vehicle types for a single manufacturer. Pass a partial make name to return vehicle types for all makes that match the partial name. When you pass a make name, results will include the MakeId and MakeName because you may get vehicle_types for more than one make. model_year: pass this to return models made in this model year vehicle_type: one of the vPIC vehicle_types (for example, \"Passenger Car\", \"Truck\", or \"Multipurpose Passenger Vehicle (MPV)\") Raises: ValueError: if ``year`` is earlier than 2016 Examples: >>> get_models_for_make(\"TESLA\", model_year=2020) [ { \"MakeId\": 441, \"MakeName\": \"TESLA\", \"ModelId\": 1685, \"ModelName\": \"Model S\" }, { \"MakeId\": 441, \"MakeName\": \"TESLA\", \"ModelId\": 10199, \"ModelName\": \"Model X\" }, { \"MakeId\": 441, \"MakeName\": \"TESLA\", \"ModelId\": 17834, \"ModelName\": \"Model 3\" }, { \"MakeId\": 441, \"MakeName\": \"TESLA\", \"ModelId\": 27027, \"ModelName\": \"Model Y\" } ] VehicleTypeId and VehicleTypeName are only returned when you specify vehicle_type. \"\"\" if make is None : raise ValueError ( \"make is required\" ) if model_year or vehicle_type : my = f \"/modelyear/ { model_year } \" if model_year else \"\" vt = f \"/vehicletype/ { vehicle_type } \" if vehicle_type else \"\" if isinstance ( make , int ): endpoint = f \"GetModelsForMakeIdYear/makeId/ { make }{ my }{ vt } \" else : endpoint = f \"GetModelsForMakeYear/make/ { make }{ my }{ vt } \" else : if isinstance ( make , int ): endpoint = f \"GetModelsForMakeId/ { make } \" else : endpoint = f \"GetModelsForMake/ { make } \" return self . _request ( endpoint )","title":"get_models_for_make()"},{"location":"client.html#vpic.client.Client.get_parts","text":"Returns a list of vehicle documentation submitted by manufacturers. Manufacturers provide vehicle information to NHTSA to comply with these regulations: 49 CFR Part 565 (Vehicle Identification Number Guidance) 49 CFR Part 566 (Manufacturer Identification \u2013 Reporting Requirements) This provides a list of documents submitted in a date range. Up to 1,000 results will be returned at a time. Parameters: Name Type Description Default cfr_part str '565' to return 49 CFR Part 565 submissions; '566' to return 49 CFR Part 566 submissions required from_date str the beginning of the date range to search required end_date the end of the date range to search required page int results are paginated; this is page number to return 1 Exceptions: Type Description ValueError if cfr_part is missing Examples: >>> get_parts ( '565' , '2015-01-01' , '2015-05-05' , 1 ) [ { \"CoverLetterURL\" : \"\" , \"LetterDate\" : \"5/5/2015\" , \"ManufacturerId\" : 8012 , \"ManufacturerName\" : \"PORSCHE CARS NORTH AMERICA, INC.\" , \"ModelYearFrom\" : null , \"ModelYearTo\" : null , \"Name\" : \"ORG10658\" , \"Type\" : null , \"URL\" : \"http://vpic.nhtsa.dot.gov/mid/home/displayfile/[guid here]\" }, ... ] Source code in vpic/client.py def get_parts ( self , cfr_part : str , from_date : str , to_date : str , page : int = 1 ) -> List [ Dict [ str , Any ]]: \"\"\"Returns a list of vehicle documentation submitted by manufacturers. Manufacturers provide vehicle information to NHTSA to comply with these regulations: * 49 CFR Part 565 (Vehicle Identification Number Guidance) * 49 CFR Part 566 (Manufacturer Identification \u2013 Reporting Requirements) This provides a list of documents submitted in a date range. Up to 1,000 results will be returned at a time. Args: cfr_part: '565' to return 49 CFR Part 565 submissions; '566' to return 49 CFR Part 566 submissions from_date: the beginning of the date range to search end_date: the end of the date range to search page: results are paginated; this is page number to return Raises: ValueError: if ``cfr_part`` is missing Examples: >>> get_parts('565', '2015-01-01', '2015-05-05', 1) [ { \"CoverLetterURL\": \"\", \"LetterDate\": \"5/5/2015\", \"ManufacturerId\": 8012, \"ManufacturerName\": \"PORSCHE CARS NORTH AMERICA, INC.\", \"ModelYearFrom\": null, \"ModelYearTo\": null, \"Name\": \"ORG10658\", \"Type\": null, \"URL\": \"http://vpic.nhtsa.dot.gov/mid/home/displayfile/[guid here]\" }, ... ] \"\"\" if cfr_part is None : raise ValueError ( \"cfr_part is required\" ) params = { \"type\" : cfr_part , \"fromDate\" : from_date , \"toDate\" : to_date , \"page\" : page , } return self . _request ( \"GetParts\" , params )","title":"get_parts()"},{"location":"client.html#vpic.client.Client.get_vehicle_types_for_make","text":"Returns vehicle types produced by a make or make Parameters: Name Type Description Default make Union[str, int] Pass the MakeId (int) or the complete make name (str) to return vehicle types for a single manufacturer. Pass a partial make name to return vehicle types for all makes that match the partial name. When you pass a make name, results will include the MakeId and MakeName because you may get vehicle_types for more than one make. required Exceptions: Type Description ValueError if make is missing Examples: >>> get_vehicle_types_for_make ( 474 ) [ { \"VehicleTypeId\" : 1 , \"VehicleTypeName\" : \"Motorcycle\" }, { \"VehicleTypeId\" : 2 , \"VehicleTypeName\" : \"Passenger Car\" }, { \"VehicleTypeId\" : 3 , \"VehicleTypeName\" : \"Truck \" }, { \"VehicleTypeId\" : 7 , \"VehicleTypeName\" : \"Multipurpose Passenger Vehicle (MPV)\" }, { \"VehicleTypeId\" : 9 , \"VehicleTypeName\" : \"Low Speed Vehicle (LSV)\" } ] >>> get_vehicle_types_for_make ( 'kia' ) [ { \"MakeId\" : 499 , \"MakeName\" : \"KIA\" , \"VehicleTypeId\" : 2 , \"VehicleTypeName\" : \"Passenger Car\" }, { \"MakeId\" : 499 , \"MakeName\" : \"KIA\" , \"VehicleTypeId\" : 7 , \"VehicleTypeName\" : \"Multipurpose Passenger Vehicle (MPV)\" }, { \"MakeId\" : 5848 , \"MakeName\" : \"MGS GRAND SPORT (MARDIKIAN)\" , \"VehicleTypeId\" : 2 , \"VehicleTypeName\" : \"Passenger Car\" } ] Source code in vpic/client.py def get_vehicle_types_for_make ( self , make : Union [ str , int ]) -> List [ Dict [ str , Any ]]: \"\"\"Returns vehicle types produced by a make or make Args: make: Pass the MakeId (int) or the complete make name (str) to return vehicle types for a single manufacturer. Pass a partial make name to return vehicle types for all makes that match the partial name. When you pass a make name, results will include the MakeId and MakeName because you may get vehicle_types for more than one make. Raises: ValueError: if ``make`` is missing Examples: >>> get_vehicle_types_for_make(474) [ { \"VehicleTypeId\": 1, \"VehicleTypeName\": \"Motorcycle\" }, { \"VehicleTypeId\": 2, \"VehicleTypeName\": \"Passenger Car\" }, { \"VehicleTypeId\": 3, \"VehicleTypeName\": \"Truck \" }, { \"VehicleTypeId\": 7, \"VehicleTypeName\": \"Multipurpose Passenger Vehicle (MPV)\" }, { \"VehicleTypeId\": 9, \"VehicleTypeName\": \"Low Speed Vehicle (LSV)\" } ] >>> get_vehicle_types_for_make('kia') [ { \"MakeId\": 499, \"MakeName\": \"KIA\", \"VehicleTypeId\": 2, \"VehicleTypeName\": \"Passenger Car\" }, { \"MakeId\": 499, \"MakeName\": \"KIA\", \"VehicleTypeId\": 7, \"VehicleTypeName\": \"Multipurpose Passenger Vehicle (MPV)\" }, { \"MakeId\": 5848, \"MakeName\": \"MGS GRAND SPORT (MARDIKIAN)\", \"VehicleTypeId\": 2, \"VehicleTypeName\": \"Passenger Car\" } ] \"\"\" if make is None : raise ValueError ( \"make is required\" ) if isinstance ( make , int ): return self . _request ( f \"GetVehicleTypesForMakeId/ { make } \" ) else : return self . _request ( f \"GetVehicleTypesForMake/ { make } \" )","title":"get_vehicle_types_for_make()"},{"location":"client.html#vpic.client.Client.get_vehicle_variable_list","text":"Return a list of vehicle variables tracked by vPIC Examples: >>> get_vehicle_variable_list () [ { \"DataType\" : \"string\" , \"Description\" : \"<p>Any other battery information that does...\" , \"Id\" : 1 , \"Name\" : \"Other Battery Info\" }, { \"DataType\" : \"lookup\" , \"Description\" : \"<p>Battery type field stores the battery ...\" , \"Id\" : 2 , \"Name\" : \"Battery Type\" }, { \"DataType\" : \"lookup\" , \"Description\" : \"<p>Bed type is the type of bed (the open b...\" , \"Id\" : 3 , \"Name\" : \"Bed Type\" }, { \"DataType\" : \"lookup\" , \"Description\" : \"<p>Cab type applies to both pickup truck ...\" , \"Id\" : 4 , \"Name\" : \"Cab Type\" }, { \"DataType\" : \"lookup\" , \"Description\" : \"<p>Body Class presents the Body Type, bas...\" , \"Id\" : 5 , \"Name\" : \"Body Class\" }, ... ] Source code in vpic/client.py def get_vehicle_variable_list ( self ) -> List [ Dict [ str , Any ]]: \"\"\"Return a list of vehicle variables tracked by vPIC Examples: >>> get_vehicle_variable_list() [ { \"DataType\": \"string\", \"Description\": \"<p>Any other battery information that does...\", \"Id\": 1, \"Name\": \"Other Battery Info\" }, { \"DataType\": \"lookup\", \"Description\": \"<p>Battery type field stores the battery ...\", \"Id\": 2, \"Name\": \"Battery Type\" }, { \"DataType\": \"lookup\", \"Description\": \"<p>Bed type is the type of bed (the open b...\", \"Id\": 3, \"Name\": \"Bed Type\" }, { \"DataType\": \"lookup\", \"Description\": \"<p>Cab type applies to both pickup truck ...\", \"Id\": 4, \"Name\": \"Cab Type\" }, { \"DataType\": \"lookup\", \"Description\": \"<p>Body Class presents the Body Type, bas...\", \"Id\": 5, \"Name\": \"Body Class\" }, ... ] \"\"\" return self . _request ( \"GetVehicleVariableList\" )","title":"get_vehicle_variable_list()"},{"location":"client.html#vpic.client.Client.get_vehicle_variable_values_list","text":"Return the values for a vehicle variable Parameters: Name Type Description Default variable_name str the name of the vehicle variable required Exceptions: Type Description ValueError if variable_name is missing Examples: >>> get_vehicle_variable_values_list ( \"Vehicle Type\" ) [ { \"ElementName\" : \"Vehicle Type\" , \"Id\" : 1 , \"Name\" : \"Motorcycle\" }, { \"ElementName\" : \"Vehicle Type\" , \"Id\" : 2 , \"Name\" : \"Passenger Car\" }, { \"ElementName\" : \"Vehicle Type\" , \"Id\" : 3 , \"Name\" : \"Truck \" }, { \"ElementName\" : \"Vehicle Type\" , \"Id\" : 5 , \"Name\" : \"Bus\" }, { \"ElementName\" : \"Vehicle Type\" , \"Id\" : 6 , \"Name\" : \"Trailer\" }, { \"ElementName\" : \"Vehicle Type\" , \"Id\" : 7 , \"Name\" : \"Multipurpose Passenger Vehicle (MPV)\" }, { \"ElementName\" : \"Vehicle Type\" , \"Id\" : 9 , \"Name\" : \"Low Speed Vehicle (LSV)\" }, { \"ElementName\" : \"Vehicle Type\" , \"Id\" : 10 , \"Name\" : \"Incomplete Vehicle\" }, { \"ElementName\" : \"Vehicle Type\" , \"Id\" : 13 , \"Name\" : \"Off Road Vehicle\" } ] Source code in vpic/client.py def get_vehicle_variable_values_list ( self , variable_name : str ) -> List [ Dict [ str , Any ]]: \"\"\"Return the values for a vehicle variable Args: variable_name: the name of the vehicle variable Raises: ValueError: if ``variable_name`` is missing Examples: >>> get_vehicle_variable_values_list(\"Vehicle Type\") [ { \"ElementName\": \"Vehicle Type\", \"Id\": 1, \"Name\": \"Motorcycle\" }, { \"ElementName\": \"Vehicle Type\", \"Id\": 2, \"Name\": \"Passenger Car\" }, { \"ElementName\": \"Vehicle Type\", \"Id\": 3, \"Name\": \"Truck \" }, { \"ElementName\": \"Vehicle Type\", \"Id\": 5, \"Name\": \"Bus\" }, { \"ElementName\": \"Vehicle Type\", \"Id\": 6, \"Name\": \"Trailer\" }, { \"ElementName\": \"Vehicle Type\", \"Id\": 7, \"Name\": \"Multipurpose Passenger Vehicle (MPV)\" }, { \"ElementName\": \"Vehicle Type\", \"Id\": 9, \"Name\": \"Low Speed Vehicle (LSV)\" }, { \"ElementName\": \"Vehicle Type\", \"Id\": 10, \"Name\": \"Incomplete Vehicle\" }, { \"ElementName\": \"Vehicle Type\", \"Id\": 13, \"Name\": \"Off Road Vehicle\" } ] \"\"\" if variable_name is None : raise ValueError ( \"variable_name is required\" ) return self . _request ( f \"GetVehicleVariableValuesList/ { variable_name } \" )","title":"get_vehicle_variable_values_list()"},{"location":"client.html#vpic.client.Client.get_wmis_for_manufacturer","text":"Returns the WMIs for one or all manufacturers You must pass one or both of provide manufacturer or vehicle_type. Parameters: Name Type Description Default manufacturer Union[str, int] Pass the Manufacturer Id (int) or the complete manufacturer name (str) to return WMIs for a single manufacturer. Pass a partial name to return WMIs for all manufacturers with names that include the partial name. None vehicle_type Union[str, int] Pass the vehicle_type Id (int) or complete vehicle_type name to return WMIs for that vehicle_type. Pass a partial name to return WMIs for vehicle_types matching that name. None Exceptions: Type Description ValueError if manufacturer and vehicle_type are missing Examples: >>> get_wmis_for_manufacturer ( 'Honda' ) [ { \"Country\" : null , \"CreatedOn\" : \"2015-03-26\" , \"DateAvailableToPublic\" : \"2015-01-01\" , \"Id\" : 987 , \"Name\" : \"HONDA MOTOR CO., LTD\" , \"UpdatedOn\" : \"2015-06-04\" , \"VehicleType\" : \"Passenger Car\" , \"WMI\" : \"JHM\" }, ... ] Source code in vpic/client.py def get_wmis_for_manufacturer ( self , manufacturer : Optional [ Union [ str , int ]] = None , vehicle_type : Optional [ Union [ str , int ]] = None , ) -> List [ Dict [ str , Any ]]: \"\"\"Returns the WMIs for one or all manufacturers You must pass one or both of provide manufacturer or vehicle_type. Args: manufacturer: Pass the Manufacturer Id (int) or the complete manufacturer name (str) to return WMIs for a single manufacturer. Pass a partial name to return WMIs for all manufacturers with names that include the partial name. vehicle_type: Pass the vehicle_type Id (int) or complete vehicle_type name to return WMIs for that vehicle_type. Pass a partial name to return WMIs for vehicle_types matching that name. Raises: ValueError: if ``manufacturer`` and ``vehicle_type`` are missing Examples: >>> get_wmis_for_manufacturer('Honda') [ { \"Country\": null, \"CreatedOn\": \"2015-03-26\", \"DateAvailableToPublic\": \"2015-01-01\", \"Id\": 987, \"Name\": \"HONDA MOTOR CO., LTD\", \"UpdatedOn\": \"2015-06-04\", \"VehicleType\": \"Passenger Car\", \"WMI\": \"JHM\" }, ... ] \"\"\" if manufacturer is None and vehicle_type is None : raise ValueError ( \"manufacturer or vehicle_type is required\" ) if manufacturer is None : endpoint = \"GetWMIsForManufacturer\" else : endpoint = f \"GetWMIsForManufacturer/ { manufacturer } \" params = {} if vehicle_type : params [ \"vehicleType\" ] = vehicle_type wmis = self . _request ( endpoint , params ) # for wmi in wmis: # wmi[\"ManufacturerId\"] = wmi[\"Id\"] # del wmi[\"Id\"] # wmi[\"Manufacturer\"] = wmi[\"Name\"] # del wmi[\"Name\"] return wmis","title":"get_wmis_for_manufacturer()"},{"location":"exceptions.html","text":"Exceptions InternalError An error occurred in the service InvalidParameters You passed an invalid parameter value. MethodNotFound Method not found in vPIC API. ServiceUnavailable The service is not available, and may be down for maintenance. TooManyRequests You made too many requests See the Retry-After header for advice about how long to wait before submitting another request. VPICError Base class for vPIC API client exceptions. Attributes: Name Type Description message Human readable string describing the exception. detail Optional[str] A more detailed or specific description of the exception. response Optional[requests.models.Response] The requests.models.Response from the vPIC API.","title":"Exceptions"},{"location":"exceptions.html#exceptions","text":"","title":"Exceptions"},{"location":"exceptions.html#vpic.exceptions.InternalError","text":"An error occurred in the service","title":"InternalError"},{"location":"exceptions.html#vpic.exceptions.InvalidParameters","text":"You passed an invalid parameter value.","title":"InvalidParameters"},{"location":"exceptions.html#vpic.exceptions.MethodNotFound","text":"Method not found in vPIC API.","title":"MethodNotFound"},{"location":"exceptions.html#vpic.exceptions.ServiceUnavailable","text":"The service is not available, and may be down for maintenance.","title":"ServiceUnavailable"},{"location":"exceptions.html#vpic.exceptions.TooManyRequests","text":"You made too many requests See the Retry-After header for advice about how long to wait before submitting another request.","title":"TooManyRequests"},{"location":"exceptions.html#vpic.exceptions.VPICError","text":"Base class for vPIC API client exceptions. Attributes: Name Type Description message Human readable string describing the exception. detail Optional[str] A more detailed or specific description of the exception. response Optional[requests.models.Response] The requests.models.Response from the vPIC API.","title":"VPICError"},{"location":"models.html","text":"Models Document dataclass Document(cover_letter_url: str, letter_date: str, manufacturer_id: int, manufacturer: str, name: str, url: str, type: Optional[str] = None, model_year_from: Optional[int] = None, model_year_to: Optional[int] = None) Make dataclass Make(make_id: int, make: str, manufacturer_id: Optional[int] = None, manufacturer: Optional[str] = None, vehicle_type_id: Optional[int] = None, vehicle_type: Optional[str] = None) Manufacturer dataclass Manufacturer(manufacturer_id: int, manufacturer: str, manufacturer_common_name: str) ManufacturerDetail dataclass ManufacturerDetail(manufacturer_id: int, manufacturer: str, manufacturer_common_name: Optional[str], manufacturer_types: List[vpic.models.ManufacturerType], vehicle_types: List[vpic.models.VehicleType], address: Optional[str] = None, address2: Optional[str] = None, city: Optional[str] = None, contact_email: Optional[str] = None, contact_fax: Optional[str] = None, contact_phone: Optional[str] = None, country: Optional[str] = None, dbas: Optional[str] = None, equipment_items: Optional[List[str]] = None, last_updated: Optional[str] = None, other_manufacturer_details: Optional[str] = None, postal_code: Optional[str] = None, primary_product: Optional[str] = None, principal_first_name: Optional[str] = None, principal_last_name: Optional[str] = None, principal_position: Optional[str] = None, state_province: Optional[str] = None, submitted_name: Optional[str] = None, submitted_on: Optional[str] = None, submitted_position: Optional[str] = None) ManufacturerType dataclass ManufacturerType(name: str) Model dataclass Model(model_id: int, model: str, make_id: Optional[int] = None, make: Optional[str] = None, vehicle_type_id: Optional[int] = None, vehicle_type: Optional[str] = None) PlantCode dataclass PlantCode(dot_code: str, name: str, address: Optional[str] = None, city: Optional[str] = None, country: Optional[str] = None, old_dot_code: Optional[str] = None, postal_code: Optional[str] = None, state_province: Optional[str] = None, status: Optional[str] = None) Value dataclass Value(element_name: str, id: int, name: str) Variable dataclass Variable(id: int, name: str, group_name: Optional[str], data_type: str, description: str) Vehicle dataclass Vehicle(abs: str, active_safety_sys_note: str, adaptive_cruise_control: str, adaptive_driving_beam: str, adaptive_headlights: str, additional_error_text: str, air_bag_loc_curtain: str, air_bag_loc_front: str, air_bag_loc_knee: str, air_bag_loc_seat_cushion: str, air_bag_loc_side: str, auto_reverse_system: str, automatic_pedestrian_alerting_sound: str, axle_configuration: str, axles: str, base_price: str, battery_a: str, battery_a_to: str, battery_cells: str, battery_info: str, battery_kwh: str, battery_kwh_to: str, battery_modules: str, battery_packs: str, battery_type: str, battery_v: str, battery_v_to: str, bed_length_in: str, bed_type: str, blind_spot_intervention: str, blind_spot_mon: str, body_cab_type: str, body_class: str, brake_system_desc: str, brake_system_type: str, bus_floor_config_type: str, bus_length: str, bus_type: str, can_aacn: str, cib: str, cash_for_clunkers: str, charger_level: str, charger_power_kw: str, cooling_type: str, curb_weight_lb: str, custom_motorcycle_type: str, daytime_running_light: str, destination_market: str, displacement_cc: str, displacement_ci: str, displacement_l: str, doors: str, drive_type: str, driver_assist: str, dynamic_brake_support: str, edr: str, esc: str, ev_drive_unit: str, electrification_level: str, engine_configuration: str, engine_cycles: str, engine_cylinders: str, engine_hp: str, engine_hp_to: str, engine_kw: str, engine_manufacturer: str, engine_model: str, entertainment_system: str, error_code: str, error_text: str, forward_collision_warning: str, fuel_injection_type: str, fuel_type_primary: str, fuel_type_secondary: str, gcwr_from: str, gcwr_to: str, gvwr_from: str, gvwr_to: str, keyless_ignition: str, lane_centering_assistance: str, lane_departure_warning: str, lane_keep_system: str, lower_beam_headlamp_light_source: str, make: str, make_id: str, manufacturer: str, manufacturer_id: str, model: str, model_id: str, model_year: str, motorcycle_chassis_type: str, motorcycle_suspension_type: str, ncsa_body_type: str, ncsa_make: str, ncsa_map_exc_approved_by: str, ncsa_map_exc_approved_on: str, ncsa_mapping_exception: str, ncsa_model: str, ncsa_note: str, note: str, other_bus_info: str, other_engine_info: str, other_motorcycle_info: str, other_restraint_system_info: str, other_trailer_info: str, park_assist: str, pedestrian_automatic_emergency_braking: str, plant_city: str, plant_company_name: str, plant_country: str, plant_state: str, possible_values: str, pretensioner: str, rear_automatic_emergency_braking: str, rear_cross_traffic_alert: str, rear_visibility_system: str, sae_automation_level: str, sae_automation_level_to: str, seat_belts_all: str, seat_rows: str, seats: str, semiautomatic_headlamp_beam_switching: str, series: str, series2: str, steering_location: str, suggested_vin: str, tpms: str, top_speed_mph: str, track_width: str, traction_control: str, trailer_body_type: str, trailer_length: str, trailer_type: str, transmission_speeds: str, transmission_style: str, trim: str, trim2: str, turbo: str, vin: str, valve_train_design: str, vehicle_type: str, wheel_base_long: str, wheel_base_short: str, wheel_base_type: str, wheel_size_front: str, wheel_size_rear: str, wheels: str, windows: str) VehicleType dataclass VehicleType(name: Optional[str], vehicle_type: Optional[str] = None, vehicle_type_id: Optional[int] = None, make: Optional[str] = None, make_id: Optional[int] = None, gvwr_from: Optional[str] = None, gvwr_to: Optional[str] = None, is_primary: Optional[bool] = None) WMI dataclass WMI(manufacturer: Optional[str], name: Optional[str], id: Optional[int], vehicle_type: str, wmi: Optional[str] = None, common_name: Optional[str] = None, url: Optional[str] = None, country: Optional[str] = None, make: Optional[str] = None, manufacturer_id: Optional[int] = None, parent_company_name: Optional[str] = None, created_on: Optional[str] = None, updated_on: Optional[str] = None, date_available_to_public: Optional[str] = None)","title":"Models"},{"location":"models.html#models","text":"","title":"Models"},{"location":"models.html#vpic.models.Document","text":"Document(cover_letter_url: str, letter_date: str, manufacturer_id: int, manufacturer: str, name: str, url: str, type: Optional[str] = None, model_year_from: Optional[int] = None, model_year_to: Optional[int] = None)","title":"Document"},{"location":"models.html#vpic.models.Make","text":"Make(make_id: int, make: str, manufacturer_id: Optional[int] = None, manufacturer: Optional[str] = None, vehicle_type_id: Optional[int] = None, vehicle_type: Optional[str] = None)","title":"Make"},{"location":"models.html#vpic.models.Manufacturer","text":"Manufacturer(manufacturer_id: int, manufacturer: str, manufacturer_common_name: str)","title":"Manufacturer"},{"location":"models.html#vpic.models.ManufacturerDetail","text":"ManufacturerDetail(manufacturer_id: int, manufacturer: str, manufacturer_common_name: Optional[str], manufacturer_types: List[vpic.models.ManufacturerType], vehicle_types: List[vpic.models.VehicleType], address: Optional[str] = None, address2: Optional[str] = None, city: Optional[str] = None, contact_email: Optional[str] = None, contact_fax: Optional[str] = None, contact_phone: Optional[str] = None, country: Optional[str] = None, dbas: Optional[str] = None, equipment_items: Optional[List[str]] = None, last_updated: Optional[str] = None, other_manufacturer_details: Optional[str] = None, postal_code: Optional[str] = None, primary_product: Optional[str] = None, principal_first_name: Optional[str] = None, principal_last_name: Optional[str] = None, principal_position: Optional[str] = None, state_province: Optional[str] = None, submitted_name: Optional[str] = None, submitted_on: Optional[str] = None, submitted_position: Optional[str] = None)","title":"ManufacturerDetail"},{"location":"models.html#vpic.models.ManufacturerType","text":"ManufacturerType(name: str)","title":"ManufacturerType"},{"location":"models.html#vpic.models.Model","text":"Model(model_id: int, model: str, make_id: Optional[int] = None, make: Optional[str] = None, vehicle_type_id: Optional[int] = None, vehicle_type: Optional[str] = None)","title":"Model"},{"location":"models.html#vpic.models.PlantCode","text":"PlantCode(dot_code: str, name: str, address: Optional[str] = None, city: Optional[str] = None, country: Optional[str] = None, old_dot_code: Optional[str] = None, postal_code: Optional[str] = None, state_province: Optional[str] = None, status: Optional[str] = None)","title":"PlantCode"},{"location":"models.html#vpic.models.Value","text":"Value(element_name: str, id: int, name: str)","title":"Value"},{"location":"models.html#vpic.models.Variable","text":"Variable(id: int, name: str, group_name: Optional[str], data_type: str, description: str)","title":"Variable"},{"location":"models.html#vpic.models.Vehicle","text":"Vehicle(abs: str, active_safety_sys_note: str, adaptive_cruise_control: str, adaptive_driving_beam: str, adaptive_headlights: str, additional_error_text: str, air_bag_loc_curtain: str, air_bag_loc_front: str, air_bag_loc_knee: str, air_bag_loc_seat_cushion: str, air_bag_loc_side: str, auto_reverse_system: str, automatic_pedestrian_alerting_sound: str, axle_configuration: str, axles: str, base_price: str, battery_a: str, battery_a_to: str, battery_cells: str, battery_info: str, battery_kwh: str, battery_kwh_to: str, battery_modules: str, battery_packs: str, battery_type: str, battery_v: str, battery_v_to: str, bed_length_in: str, bed_type: str, blind_spot_intervention: str, blind_spot_mon: str, body_cab_type: str, body_class: str, brake_system_desc: str, brake_system_type: str, bus_floor_config_type: str, bus_length: str, bus_type: str, can_aacn: str, cib: str, cash_for_clunkers: str, charger_level: str, charger_power_kw: str, cooling_type: str, curb_weight_lb: str, custom_motorcycle_type: str, daytime_running_light: str, destination_market: str, displacement_cc: str, displacement_ci: str, displacement_l: str, doors: str, drive_type: str, driver_assist: str, dynamic_brake_support: str, edr: str, esc: str, ev_drive_unit: str, electrification_level: str, engine_configuration: str, engine_cycles: str, engine_cylinders: str, engine_hp: str, engine_hp_to: str, engine_kw: str, engine_manufacturer: str, engine_model: str, entertainment_system: str, error_code: str, error_text: str, forward_collision_warning: str, fuel_injection_type: str, fuel_type_primary: str, fuel_type_secondary: str, gcwr_from: str, gcwr_to: str, gvwr_from: str, gvwr_to: str, keyless_ignition: str, lane_centering_assistance: str, lane_departure_warning: str, lane_keep_system: str, lower_beam_headlamp_light_source: str, make: str, make_id: str, manufacturer: str, manufacturer_id: str, model: str, model_id: str, model_year: str, motorcycle_chassis_type: str, motorcycle_suspension_type: str, ncsa_body_type: str, ncsa_make: str, ncsa_map_exc_approved_by: str, ncsa_map_exc_approved_on: str, ncsa_mapping_exception: str, ncsa_model: str, ncsa_note: str, note: str, other_bus_info: str, other_engine_info: str, other_motorcycle_info: str, other_restraint_system_info: str, other_trailer_info: str, park_assist: str, pedestrian_automatic_emergency_braking: str, plant_city: str, plant_company_name: str, plant_country: str, plant_state: str, possible_values: str, pretensioner: str, rear_automatic_emergency_braking: str, rear_cross_traffic_alert: str, rear_visibility_system: str, sae_automation_level: str, sae_automation_level_to: str, seat_belts_all: str, seat_rows: str, seats: str, semiautomatic_headlamp_beam_switching: str, series: str, series2: str, steering_location: str, suggested_vin: str, tpms: str, top_speed_mph: str, track_width: str, traction_control: str, trailer_body_type: str, trailer_length: str, trailer_type: str, transmission_speeds: str, transmission_style: str, trim: str, trim2: str, turbo: str, vin: str, valve_train_design: str, vehicle_type: str, wheel_base_long: str, wheel_base_short: str, wheel_base_type: str, wheel_size_front: str, wheel_size_rear: str, wheels: str, windows: str)","title":"Vehicle"},{"location":"models.html#vpic.models.VehicleType","text":"VehicleType(name: Optional[str], vehicle_type: Optional[str] = None, vehicle_type_id: Optional[int] = None, make: Optional[str] = None, make_id: Optional[int] = None, gvwr_from: Optional[str] = None, gvwr_to: Optional[str] = None, is_primary: Optional[bool] = None)","title":"VehicleType"},{"location":"models.html#vpic.models.WMI","text":"WMI(manufacturer: Optional[str], name: Optional[str], id: Optional[int], vehicle_type: str, wmi: Optional[str] = None, common_name: Optional[str] = None, url: Optional[str] = None, country: Optional[str] = None, make: Optional[str] = None, manufacturer_id: Optional[int] = None, parent_company_name: Optional[str] = None, created_on: Optional[str] = None, updated_on: Optional[str] = None, date_available_to_public: Optional[str] = None)","title":"WMI"},{"location":"typed_client.html","text":"TypedClient module TypedClient A client library for the U.S. NHTSA vPIC API TypedClient returns model objects instead of JSON responses. If you need the original vPIC JSON responses, use vpic.Client . A client library for the United States National Highway Traffic Safety Administration (NHTSA) Vehicle Product Information Catalog (vPIC) Vehicle Listing API. Use this to gather information on vehicles and their specifications, and to decode VINs to extract information for specific vehicles. vPIC has information about these types of vehicles sold or imported in the USA: Bus Incomplete Vehicle Low Speed Vehicle (LSV) Motorcycle Multipurpose Passenger Vehicle (MPV) Passenger Car Trailer Truck vPIC has all of the information about how manufacturers assign a VIN that encodes the vehicles characteristics. Vehicle manufacturers provide this information to NHTSA under U.S. law 49 CFR Part 565. The API available 24/7, is free to use, and does not require registration. NHTSA uses automatic traffic rate controls to maintain the performance of the API and their websites that use the API. NHTSA occasionally adds, removes, or renames variables in vPIC API responses. This class uses Marshmallow to deserialize the response. When a variable is missing or renamed, methods in this class raise marshmallow.exceptions.ValidationError . If you instantiate this class with unknown='RAISE', methods will also raise marshmallow.exceptions.ValidationError when the vPIC response includes a new variable that isn't defined in the model (models.py). See https://vpic.nhtsa.dot.gov/api for more on the API. Attributes: Name Type Description host Hostname, including http(s)://, of the vPIC instance to query. unknowns exclude new API response variables ('EXCLUDE'), or raise an exception ('RAISE') instead decode_vin ( self , vin , model_year = None , extend = False ) Decode a 17-digit Vehicle Identification Number (VIN) or partial VIN. Decode the make, model, series, trim, and other vehicle information from VIN. Model year is required for pre-1980 vehicles, though vPIC recommends that you always pass it. If you don't have a complete 17-digit VIN, you can pass a partial VIN, using asterisk (*) for missing characters. The VIN check digit (the 9th character) isn't required for partial VINs. The shorter the partial VIN, the less vehicle information you'll receive in the response. See get_vehicle_variable_list for the variables returned here. Parameters: Name Type Description Default vin str A 17-digit VIN or partial VIN. Use asterisk for missing characters. required model_year Optional[int] The vehicle's model year. Recommended, but not required. None extend Optional[bool] If True, response will include variables for other NHTSA programs like NCSA. Defaults to False. False Returns: Type Description Vehicle A Vehicle with the information decoded from vin . Exceptions: Type Description ValueError if vin is missing or isn't 6 to 17 characters long. ValueError if model_year is earlier than 1981. Examples: >>> decode_vin ( '1FTMW1T88MFA00001' ) Vehicle ( abs = \"\" , ... body_cab_type = \"Crew/ Super Crew/ Crew Max\" , body_class = \"Pickup\" , brake_system_desc = \"\" , brake_system_type = \"Hydraulic\" , ... displacement_cc = \"3500.0\" , displacement_ci = \"213.58310433156\" , displacement_l = \"3.5\" , ... drive_type = \"4WD/4-Wheel Drive/4x4\" , ... engine_configuration = \"V-Shaped\" , engine_cycles = \"\" , engine_cylinders = \"6\" , engine_hp = \"375\" , engine_hp_to = \"\" , engine_kw = \"279.6375\" , engine_manufacturer = \"Ford\" , engine_model = \"GTDI\" , entertainment_system = \"\" , error_code = \"0\" , error_text = \"0 - VIN decoded clean. Check Digit (9th position) is co...\" , ... make = \"FORD\" , make_id = \"460\" , manufacturer = \"FORD MOTOR COMPANY, USA\" , manufacturer_id = \"976\" , model = \"F-150\" , model_id = \"1801\" , model_year = \"2021\" , motorcycle_chassis_type = \"Not Applicable\" , motorcycle_suspension_type = \"Not Applicable\" , ... plant_city = \"DEARBORN\" , plant_company_name = \"\" , plant_country = \"UNITED STATES (USA)\" , plant_state = \"MICHIGAN\" , ... series = \"F-Series\" , series2 = \"\" , ... trim = \"SuperCrew-SSV\" , ... vin = \"1FTMW1T88MFA00001\" , ... vehicle_type = \"TRUCK \" , ... ) Source code in vpic/typed_client.py def decode_vin ( self , vin : str , model_year : Optional [ int ] = None , extend : Optional [ bool ] = False ) -> Vehicle : \"\"\"Decode a 17-digit Vehicle Identification Number (VIN) or partial VIN. Decode the make, model, series, trim, and other vehicle information from VIN. Model year is required for pre-1980 vehicles, though vPIC recommends that you always pass it. If you don't have a complete 17-digit VIN, you can pass a partial VIN, using asterisk (*) for missing characters. The VIN check digit (the 9th character) isn't required for partial VINs. The shorter the partial VIN, the less vehicle information you'll receive in the response. See get_vehicle_variable_list for the variables returned here. Args: vin: A 17-digit VIN or partial VIN. Use asterisk for missing characters. model_year: The vehicle's model year. Recommended, but not required. extend: If True, response will include variables for other NHTSA programs like NCSA. Defaults to False. Returns: A ``Vehicle`` with the information decoded from ``vin``. Raises: ValueError: if ``vin`` is missing or isn't 6 to 17 characters long. ValueError: if ``model_year`` is earlier than 1981. Example: >>> decode_vin('1FTMW1T88MFA00001') Vehicle( abs=\"\", ... body_cab_type=\"Crew/ Super Crew/ Crew Max\", body_class=\"Pickup\", brake_system_desc=\"\", brake_system_type=\"Hydraulic\", ... displacement_cc=\"3500.0\", displacement_ci=\"213.58310433156\", displacement_l=\"3.5\", ... drive_type=\"4WD/4-Wheel Drive/4x4\", ... engine_configuration=\"V-Shaped\", engine_cycles=\"\", engine_cylinders=\"6\", engine_hp=\"375\", engine_hp_to=\"\", engine_kw=\"279.6375\", engine_manufacturer=\"Ford\", engine_model=\"GTDI\", entertainment_system=\"\", error_code=\"0\", error_text=\"0 - VIN decoded clean. Check Digit (9th position) is co...\", ... make=\"FORD\", make_id=\"460\", manufacturer=\"FORD MOTOR COMPANY, USA\", manufacturer_id=\"976\", model=\"F-150\", model_id=\"1801\", model_year=\"2021\", motorcycle_chassis_type=\"Not Applicable\", motorcycle_suspension_type=\"Not Applicable\", ... plant_city=\"DEARBORN\", plant_company_name=\"\", plant_country=\"UNITED STATES (USA)\", plant_state=\"MICHIGAN\", ... series=\"F-Series\", series2=\"\", ... trim=\"SuperCrew-SSV\", ... vin=\"1FTMW1T88MFA00001\", ... vehicle_type=\"TRUCK \", ... ) \"\"\" schema = desert . schema ( Vehicle , meta = self . _meta ) return schema . load ( snake_case ( self . _client . decode_vin ( vin , model_year , extend ))) decode_vin_batch ( self , vins ) Decode a batch of 17-digit VINs or partial VINs. Model year is required for pre-1980 vehicles, though vPIC recommends that you always pass it. If you don't have a complete 17-digit VIN, you can pass a partial VIN, using asterisk (*) for missing characters. The VIN check digit (the 9th character) isn't required for partial VINs. The shorter the partial VIN, the less vehicle information you'll receive in the response. Vehicle variables will be returned in key-value pairs, the same format returned by decode_vin(.., flatten=True). See get_vehicle_variable_list for the variables returned here. Parameters: Name Type Description Default vins List[str] A list of 17-digit VIN or partial VINs and optional model year. Use asterisk for missing characters. For example: [\"VIN, model_year\", \"VIN, model_year\", ...] required Returns: Type Description List[vpic.models.Vehicle] A list of Vehicle s with the information decoded from vins . Exceptions: Type Description ValueError if vin is missing or isn't 6 to 17 characters long. ValueError if model_year is earlier than 1981. Examples: >>> decode_vin_batch ([ \"5UXWX7C5*BA,2011\" , \"5YJSA3DS*EF\" ]) [ Vehicle ( ... ), Vehicle ( ... )] Source code in vpic/typed_client.py def decode_vin_batch ( self , vins : List [ str ]) -> List [ Vehicle ]: \"\"\"Decode a batch of 17-digit VINs or partial VINs. Model year is required for pre-1980 vehicles, though vPIC recommends that you always pass it. If you don't have a complete 17-digit VIN, you can pass a partial VIN, using asterisk (*) for missing characters. The VIN check digit (the 9th character) isn't required for partial VINs. The shorter the partial VIN, the less vehicle information you'll receive in the response. Vehicle variables will be returned in key-value pairs, the same format returned by decode_vin(.., flatten=True). See get_vehicle_variable_list for the variables returned here. Args: vins: A list of 17-digit VIN or partial VINs and optional model year. Use asterisk for missing characters. For example: [\"VIN, model_year\", \"VIN, model_year\", ...] Returns: A list of ``Vehicle``s with the information decoded from ``vins``. Raises: ValueError: if ``vin`` is missing or isn't 6 to 17 characters long. ValueError: if ``model_year`` is earlier than 1981. Example: >>> decode_vin_batch([\"5UXWX7C5*BA,2011\", \"5YJSA3DS*EF\"]) [Vehicle(...), Vehicle(...)] \"\"\" vehicles = self . _client . decode_vin_batch ( vins ) schema = desert . schema ( Vehicle , meta = self . _meta ) return [ schema . load ( snake_case ( v )) for v in vehicles ] decode_wmi ( self , wmi ) Decode a WMI to get manufacturer information Provides information on the World Manufacturer Identifier for a specific WMI code. Parameters: Name Type Description Default wmi str A 3-character or 6-character World Manufacturer Index code. Large volume manufacturers usually have a 3 character WMI representing positions 1 to 3 (\"JTD\") of a VIN. Smaller manufacturers have a 6 character WMI representing positions 1 to 3 and 12 to 14 of a VIN. required Returns: Type Description WMI A WorldManufacturerIndex with information about the manufacturer. Exceptions: Type Description ValueError if wmi is missing or isn't 3 or 6 characters long. Examples: >>> decode_wmi ( '1FT' ) WorldManufacturerIndex ( common_name = \"Ford\" , created_on = \"2015-03-23\" , date_available_to_public = \"2015-01-01\" , make = \"FORD\" , manufacturer = \"FORD MOTOR COMPANY, USA\" , parent_company_name = \"\" , updated_on = None , url = \"http://www.ford.com/\" , vehicle_type = \"Truck \" , ) Source code in vpic/typed_client.py def decode_wmi ( self , wmi : str ) -> WMI : \"\"\"Decode a WMI to get manufacturer information Provides information on the World Manufacturer Identifier for a specific WMI code. Args: wmi: A 3-character or 6-character World Manufacturer Index code. Large volume manufacturers usually have a 3 character WMI representing positions 1 to 3 (\"JTD\") of a VIN. Smaller manufacturers have a 6 character WMI representing positions 1 to 3 and 12 to 14 of a VIN. Returns: A ``WorldManufacturerIndex`` with information about the manufacturer. Raises: ValueError: if ``wmi`` is missing or isn't 3 or 6 characters long. Example: >>> decode_wmi('1FT') WorldManufacturerIndex( common_name=\"Ford\", created_on=\"2015-03-23\", date_available_to_public=\"2015-01-01\", make=\"FORD\", manufacturer=\"FORD MOTOR COMPANY, USA\", parent_company_name=\"\", updated_on=None, url=\"http://www.ford.com/\", vehicle_type=\"Truck \", ) \"\"\" schema = desert . schema ( WMI , meta = self . _meta ) return schema . load ( snake_case ( self . _client . decode_wmi ( wmi ))) get_all_makes ( self ) Returns all of the makes registered with vPIC. Returns: Type Description List[vpic.models.Make] A list of all of the Make s registered with vPIC. Examples: >>> get_all_makes () [ Make ( make_id = 440 , make = 'ASTON MARTIN' ), Make ( make_id = 441 , make = 'TESLA' ), Make ( make_id = 442 , make = 'JAGUAR' ), Make ( make_id = 443 , make = 'MASERATI' ), Make ( make_id = 444 , make = 'LAND ROVER' ), Make ( make_id = 445 , make = 'ROLLS ROYCE' ), Make ( make_id = 446 , make = 'BUELL (EBR)' ), Make ( make_id = 447 , make = 'JIALING' ), Make ( make_id = 448 , make = 'TOYOTA' ), Make ( make_id = 449 , make = 'MERCEDES-BENZ' ), ... ] Source code in vpic/typed_client.py def get_all_makes ( self ) -> List [ Make ]: \"\"\"Returns all of the makes registered with vPIC. Returns: A list of all of the ``Make``s registered with vPIC. Examples: >>> get_all_makes() [ Make(make_id=440, make='ASTON MARTIN'), Make(make_id=441, make='TESLA'), Make(make_id=442, make='JAGUAR'), Make(make_id=443, make='MASERATI'), Make(make_id=444, make='LAND ROVER'), Make(make_id=445, make='ROLLS ROYCE'), Make(make_id=446, make='BUELL (EBR)'), Make(make_id=447, make='JIALING'), Make(make_id=448, make='TOYOTA'), Make(make_id=449, make='MERCEDES-BENZ'), ... ] \"\"\" makes = self . _client . get_all_makes () schema = desert . schema ( Make , meta = self . _meta ) return [ schema . load ( snake_case ( make )) for make in makes ] get_all_manufacturers ( self , manufacturer_type = None , page = 1 ) Return a list of vPIC manufacturers of the given manufacturer_type. This provides a list of all the Manufacturers available in vPIC Dataset. See get_vehicle_variable_values_list(\"Manufacturer Type\") for the list of manufacturer types. Parameters: Name Type Description Default manufacturer_type Optional[str] The manufacturer type, which is Incomplete Vehicles, Completed Vehicle Manufacturer, Incomplete Vehicle Manufacturer, Intermediate Manufacturer, Final-Stage Manufacturer, Alterer, Replica Vehicle Manufacturer. You can pass the full type name, or a substring of the type. None page int results are paginated; this is the page number to return 1 Returns: Type Description List[vpic.models.Manufacturer] A list of the Manufacturers s registered with vPIC. Examples: >>> get_all_manufacturers ( \"Completed Vehicle\" , 1 ) [ { \"Country\" : \"UNITED STATES (USA)\" , \"Mfr_CommonName\" : \"Tesla\" , \"Mfr_ID\" : 955 , \"Mfr_Name\" : \"TESLA, INC.\" , \"VehicleTypes\" : [ { \"IsPrimary\" : true , \"Name\" : \"Passenger Car\" }, { \"IsPrimary\" : false , \"Name\" : \"Multipurpose Passenger Vehicle (MPV)\" } }, ... ] Source code in vpic/typed_client.py def get_all_manufacturers ( self , manufacturer_type : Optional [ str ] = None , page : int = 1 ) -> List [ Manufacturer ]: \"\"\"Return a list of vPIC manufacturers of the given manufacturer_type. This provides a list of all the Manufacturers available in vPIC Dataset. See ``get_vehicle_variable_values_list(\"Manufacturer Type\")`` for the list of manufacturer types. Args: manufacturer_type: The manufacturer type, which is Incomplete Vehicles, Completed Vehicle Manufacturer, Incomplete Vehicle Manufacturer, Intermediate Manufacturer, Final-Stage Manufacturer, Alterer, Replica Vehicle Manufacturer. You can pass the full type name, or a substring of the type. page: results are paginated; this is the page number to return Returns: A list of the ``Manufacturers``s registered with vPIC. Examples: >>> get_all_manufacturers(\"Completed Vehicle\", 1) [ { \"Country\": \"UNITED STATES (USA)\", \"Mfr_CommonName\": \"Tesla\", \"Mfr_ID\": 955, \"Mfr_Name\": \"TESLA, INC.\", \"VehicleTypes\": [ { \"IsPrimary\": true, \"Name\": \"Passenger Car\" }, { \"IsPrimary\": false, \"Name\": \"Multipurpose Passenger Vehicle (MPV)\" } }, ... ] \"\"\" raise NotImplementedError get_equipment_plant_codes ( self , year , equipment_type , report_type = 'All' ) Returns a list of plants that manufacture certain vehicle equipment. Plants have a unique three-character U.S. Department of Transportation (DOT) code. vPIC API documentation says this API only accepts 2016 and later. Parameters: Name Type Description Default year int must be 2016 or later required equipment_type int return plants that manufacture one of these equipment types: 1 = Tires; 3 = Brake Hoses; 13 = Glazing; 16 = Retread required report_type str must be one of New = plants whose code was assigned during the selected year Updated = plants whose data was modified during the selected year Closed = plants that are no longer active All = all active and closed plants, regardless of year 'All' Returns: Type Description List[vpic.models.PlantCode] A list of PlantCode s that manufacture the equipment_type Exceptions: Type Description ValueError if year is earlier than 2016 Examples: >>> get_equipment_plant_codes ( 2016 , 1 ) [ PlantCode ( address = '2950 INTERNATIONAL BLVD.' , city = 'CLARKSVILLE' , ... ), PlantCode ( address = '1850 BARTON FERRY ROAD' , city = 'WEST POINT' , cou ... ), PlantCode ( address = 'No. 52 Street 536, Bau Tran Hamlet, Nhuan Duc C...), PlantCode ( address = 'NO. 23, HAILAR EAST ROAD' , city = 'HUHHOT' , count ... ), PlantCode ( address = 'NO. 9 EAST BEISAN ROAD' , city = 'SHENYANG' , count ... ), PlantCode ( address = 'HONGSHANZUI ECONOMIC DEV. ZONE' , city = 'PINGQUAN...), PlantCode ( address = 'QIANLIU VILLAGE XIADIAN TOWN' , city = 'CHANGYI CI...), PlantCode ( address = 'DOWANG TOWN' , city = 'GUANGRAO COUNTY' , country = '...), PlantCode ( address = 'NO.1 HUIXIN ROAD' , city = 'GAOTANG' , country = 'CHI...), PlantCode ( address = 'NO.668 LAMEI ROAD,JIESHI TOWN,BANAN DISTRICT' , ... ), ] Source code in vpic/typed_client.py def get_equipment_plant_codes ( self , year : int , equipment_type : int , report_type : str = \"All\" ) -> List [ PlantCode ]: \"\"\"Returns a list of plants that manufacture certain vehicle equipment. Plants have a unique three-character U.S. Department of Transportation (DOT) code. vPIC API documentation says this API only accepts 2016 and later. Args: year: must be 2016 or later equipment_type: return plants that manufacture one of these equipment types: 1 = Tires; 3 = Brake Hoses; 13 = Glazing; 16 = Retread report_type: must be one of New = plants whose code was assigned during the selected year Updated = plants whose data was modified during the selected year Closed = plants that are no longer active All = all active and closed plants, regardless of year Returns: A list of ``PlantCode``s that manufacture the equipment_type Raises: ValueError: if ``year`` is earlier than 2016 Example: >>> get_equipment_plant_codes(2016, 1) [ PlantCode(address='2950 INTERNATIONAL BLVD.', city='CLARKSVILLE', ...), PlantCode(address='1850 BARTON FERRY ROAD', city='WEST POINT', cou...), PlantCode(address='No. 52 Street 536, Bau Tran Hamlet, Nhuan Duc C...), PlantCode(address='NO. 23, HAILAR EAST ROAD', city='HUHHOT', count...), PlantCode(address='NO. 9 EAST BEISAN ROAD', city='SHENYANG', count...), PlantCode(address='HONGSHANZUI ECONOMIC DEV. ZONE', city='PINGQUAN...), PlantCode(address='QIANLIU VILLAGE XIADIAN TOWN', city='CHANGYI CI...), PlantCode(address='DOWANG TOWN', city='GUANGRAO COUNTY', country='...), PlantCode(address='NO.1 HUIXIN ROAD', city='GAOTANG', country='CHI...), PlantCode(address='NO.668 LAMEI ROAD,JIESHI TOWN,BANAN DISTRICT', ...), ] \"\"\" plant_codes = self . _client . get_equipment_plant_codes ( year , equipment_type , report_type ) schema = desert . schema ( PlantCode , meta = self . _meta ) return [ schema . load ( snake_case ( pc )) for pc in plant_codes ] get_makes_for_manufacturer ( self , manufacturer , model_year = None ) Returns makes produced by a manufacturer or manufacturers. Parameters: Name Type Description Default manufacturer Union[str, int] Pass the Manufacturer Id (int) or the complete manufacturer name (str) to return detail for a single manufacturer. Pass a partial name to return manufacturers with names that include the partial name. required model_year Optional[int] Pass a model year to return only those makes made by the manufacturer for that model year. None Returns: Type Description List[vpic.models.Make] A list of Makes s produced by the manufacturer(s) Exceptions: Type Description ValueError if manufacturer is missing Examples: >>> get_makes_for_manufacturer ( 988 ) [ Make ( make_id : 474 make : 'HONDA' manufacturer_id : None manufacturer : 'HONDA DEVELOPMENT & MANUFACTURING OF AMERICA...' ), Make ( make_id = 475 , make = 'ACURA' , manufacturer_id = None , manufacturer = 'HONDA DEVELOPMENT & MANUFACTURING OF AMERICA...' ) ... ] Source code in vpic/typed_client.py def get_makes_for_manufacturer ( self , manufacturer : Union [ str , int ], model_year : Optional [ int ] = None ) -> List [ Make ]: \"\"\"Returns makes produced by a manufacturer or manufacturers. Args: manufacturer: Pass the Manufacturer Id (int) or the complete manufacturer name (str) to return detail for a single manufacturer. Pass a partial name to return manufacturers with names that include the partial name. model_year: Pass a model year to return only those makes made by the manufacturer for that model year. Returns: A list of ``Makes``s produced by the manufacturer(s) Raises: ValueError: if ``manufacturer`` is missing Examples: >>> get_makes_for_manufacturer(988) [ Make( make_id:474 make:'HONDA' manufacturer_id:None manufacturer:'HONDA DEVELOPMENT & MANUFACTURING OF AMERICA...' ), Make( make_id=475, make='ACURA', manufacturer_id=None, manufacturer='HONDA DEVELOPMENT & MANUFACTURING OF AMERICA...' ) ... ] \"\"\" makes = self . _client . get_makes_for_manufacturer ( manufacturer , model_year ) schema = desert . schema ( Make , meta = self . _meta ) return [ schema . load ( snake_case ( m )) for m in makes ] get_makes_for_vehicle_type ( self , vehicle_type ) Returns makes that produce a vehicle_type Parameters: Name Type Description Default vehicle_type str A vPIC vehicle_type. For example, \"Passenger Car\", \"Truck\", or \"Multipurpose Passenger Vehicle (MPV)\". If you pass a partial vehicle_type, for example \"Passenger\", results will include makes for all matching vehicle types. Matching is not case sensitive. required Returns: Type Description List[vpic.models.Make] A list of Makes s that produce the vehicle_type Exceptions: Type Description ValueError if vehicle_type is missing Examples: >>> get_makes_for_vehicle_type ( 'Car' ) [ Make ( make_id = 440 , make = 'ASTON MARTIN' , manufacturer_id = None , manufacturer = None , vehicle_type_id = 2 , vehicle_type = 'Passenger Car' ) ... ] Source code in vpic/typed_client.py def get_makes_for_vehicle_type ( self , vehicle_type : str ) -> List [ Make ]: \"\"\"Returns makes that produce a vehicle_type Args: vehicle_type: A vPIC vehicle_type. For example, \"Passenger Car\", \"Truck\", or \"Multipurpose Passenger Vehicle (MPV)\". If you pass a partial vehicle_type, for example \"Passenger\", results will include makes for all matching vehicle types. Matching is not case sensitive. Returns: A list of ``Makes``s that produce the ``vehicle_type`` Raises: ValueError: if ``vehicle_type`` is missing Examples: >>> get_makes_for_vehicle_type('Car') [ Make( make_id=440, make='ASTON MARTIN', manufacturer_id=None, manufacturer=None, vehicle_type_id=2, vehicle_type='Passenger Car' ) ... ] \"\"\" makes = self . _client . get_makes_for_vehicle_type ( vehicle_type ) schema = desert . schema ( Make , meta = self . _meta ) return [ schema . load ( snake_case ( m )) for m in makes ] get_manufacturer_details ( self , manufacturer ) Returns details for one or more manufacturers. Parameters: Name Type Description Default manufacturer Union[str, int] Pass the Manufacturer Id (int) or the complete manufacturer name (str) to return detail for a single manufacturer. Pass a partial name to return manufacturers with names that include the partial name. required Returns: Type Description List[vpic.models.ManufacturerDetail] A list of ManufacturerDetail s for the manufacturer(s) Examples: >>> get_manufacturer_details ( 988 ) [ ManufacturerDetail ( manufacturer_id = 988 , manufacturer = \"HONDA DEVELOPMENT & MANUFACTURING OF AMER...\" , manufacturer_common_name = \"Honda\" , address = \"1919 Torrance Blvd.\" , address2 = None , city = \"Torrance\" , contact_email = \"...@ahm.honda.com\" , contact_fax = None , contact_phone = \"...\" , country = \"UNITED STATES (USA)\" , dbas = \"Marysville Auto Plant and East Liberty Auto Plant; ...\" , equipment_items = [], last_updated = \"/Date(1618422117803-0400)/\" , manufacturer_types = [ ManufacturerType ( name = \"Completed Vehicle Manufacturer\" ) ], other_manufacturer_details = None , postal_code = \"90501\" , primary_product = None , principal_first_name = \"...\" , principal_last_name = None , principal_position = \"President & CEO\" , state_province = \"CALIFORNIA\" , submitted_name = \"...\" , submitted_on = \"/Date(1618286400000-0400)/\" , submitted_position = \"Sr. Specialist, II\" , vehicle_types = [ VehicleType ( vehicle_type = \"Passenger Car\" , vehicle_type_id = None , make_id = None , make = None , gvwr_from = \"Class 1A: 3,000 lb or less (1,360 kg or less)\" , gvwr_to = \"Class 1D: 5,001 - 6,000 lb (2,268 - 2,722 kg)\" , is_primary = True ), VehicleType ( vehicle_type = \"Truck \" , vehicle_type_id = None , make_id = None , make = None , gvwr_from = \"Class 2E: 6,001 - 7,000 lb (2,722 - 3,175 kg)\" , gvwr_to = \"Class 2E: 6,001 - 7,000 lb (2,722 - 3,175 kg)\" , is_primary = False ), VehicleType ( vehicle_type = \"Multipurpose Passenger Vehicle (MPV)\" , vehicle_type_id = None , make_id = None , make = None , gvwr_from = \"Class 1B: 3,001 - 4,000 lb (1,360 - 1,814 kg)\" , gvwr_to = \"Class 2E: 6,001 - 7,000 lb (2,722 - 3,175 kg)\" , is_primary = False ) ] ) ] Source code in vpic/typed_client.py def get_manufacturer_details ( self , manufacturer : Union [ str , int ] ) -> List [ ManufacturerDetail ]: \"\"\"Returns details for one or more manufacturers. Args: manufacturer: Pass the Manufacturer Id (int) or the complete manufacturer name (str) to return detail for a single manufacturer. Pass a partial name to return manufacturers with names that include the partial name. Returns: A list of ``ManufacturerDetail``s for the manufacturer(s) Examples: >>> get_manufacturer_details(988) [ ManufacturerDetail( manufacturer_id=988, manufacturer=\"HONDA DEVELOPMENT & MANUFACTURING OF AMER...\", manufacturer_common_name=\"Honda\", address=\"1919 Torrance Blvd.\", address2=None, city=\"Torrance\", contact_email=\"...@ahm.honda.com\", contact_fax=None, contact_phone=\"...\", country=\"UNITED STATES (USA)\", dbas=\"Marysville Auto Plant and East Liberty Auto Plant; ...\", equipment_items=[], last_updated=\"/Date(1618422117803-0400)/\", manufacturer_types=[ ManufacturerType( name=\"Completed Vehicle Manufacturer\") ], other_manufacturer_details=None, postal_code=\"90501\", primary_product=None, principal_first_name=\"...\", principal_last_name=None, principal_position=\"President & CEO\", state_province=\"CALIFORNIA\", submitted_name=\"...\", submitted_on=\"/Date(1618286400000-0400)/\", submitted_position=\"Sr. Specialist, II\", vehicle_types=[ VehicleType( vehicle_type=\"Passenger Car\", vehicle_type_id=None, make_id=None, make=None, gvwr_from=\"Class 1A: 3,000 lb or less (1,360 kg or less)\", gvwr_to=\"Class 1D: 5,001 - 6,000 lb (2,268 - 2,722 kg)\", is_primary=True ), VehicleType( vehicle_type=\"Truck \", vehicle_type_id=None, make_id=None, make=None, gvwr_from=\"Class 2E: 6,001 - 7,000 lb (2,722 - 3,175 kg)\", gvwr_to=\"Class 2E: 6,001 - 7,000 lb (2,722 - 3,175 kg)\", is_primary=False ), VehicleType( vehicle_type=\"Multipurpose Passenger Vehicle (MPV)\", vehicle_type_id=None, make_id=None, make=None, gvwr_from=\"Class 1B: 3,001 - 4,000 lb (1,360 - 1,814 kg)\", gvwr_to=\"Class 2E: 6,001 - 7,000 lb (2,722 - 3,175 kg)\", is_primary=False ) ] ) ] \"\"\" results = self . _client . get_manufacturer_details ( manufacturer ) for r in results : r [ \"dbas\" ] = r [ \"DBAs\" ] del r [ \"DBAs\" ] # r[\"ManufacturerTypes\"] = [ # ManufacturerType(name=mt[\"Name\"]) for mt in r[\"ManufacturerTypes\"] # ] # r[\"VehicleTypes\"] = [ # VehicleType( # vehicle_type=vt[\"Name\"], # is_primary=vt[\"IsPrimary\"], # gvwr_from=vt[\"GVWRFrom\"], # gvwr_to=vt[\"GVWRTo\"], # ) # for vt in r[\"VehicleTypes\"] # ] # r[\"ManufacturerTypes\"] = [snake_case(mt) for mt in r[\"ManufacturerTypes\"]] # r[\"VehicleTypes\"] = [snake_case(vt) for vt in r[\"VehicleTypes\"]] schema = desert . schema ( ManufacturerDetail , meta = self . _meta ) snake_cased = [ snake_case ( r ) for r in results ] return [ schema . load ( sc ) for sc in snake_cased ] get_models_for_make ( self , make , model_year = None , vehicle_type = None ) Return a list of models for a make or makes. Optionally filter the results by model year and vehicle type. Parameters: Name Type Description Default make Union[int, str] Pass the MakeId (int) or the complete make name (str) to return vehicle types for a single manufacturer. Pass a partial make name to return vehicle types for all makes that match the partial name. When you pass a make name, results will include the MakeId and MakeName because you may get vehicle_types for more than one make. required model_year Optional[int] pass this to return models made in this model year None vehicle_type Optional[str] one of the vPIC vehicle_types (for example, \"Passenger Car\", \"Truck\", or \"Multipurpose Passenger Vehicle (MPV)\") None Returns: Type Description List[vpic.models.Model] A list of Model s Exceptions: Type Description ValueError if year is earlier than 2016 Examples: >>> get_models_for_make ( \"TESLA\" , model_year = 2020 ) [ Model ( model_id = 1685 , model = 'Model S' , make_id = 441 , make = 'TESLA' , vehicle_type_id = None ), Model ( model_id = 10199 , model = 'Model X' , make_id = 441 , make = 'TESLA' , vehicle_type_id = None ), Model ( model_id = 17834 , model = 'Model 3' , make_id = 441 , make = 'TESLA' , vehicle_type_id = None ), Model ( model_id = 27027 , model = 'Model Y' , make_id = 441 , make = 'TESLA' , vehicle_type_id = None ) ] VehicleTypeId and VehicleType are only returned when you specify vehicle_type. Source code in vpic/typed_client.py def get_models_for_make ( self , make : Union [ int , str ], model_year : Optional [ int ] = None , vehicle_type : Optional [ str ] = None , ) -> List [ Model ]: \"\"\"Return a list of models for a make or makes. Optionally filter the results by model year and vehicle type. Args: make: Pass the MakeId (int) or the complete make name (str) to return vehicle types for a single manufacturer. Pass a partial make name to return vehicle types for all makes that match the partial name. When you pass a make name, results will include the MakeId and MakeName because you may get vehicle_types for more than one make. model_year: pass this to return models made in this model year vehicle_type: one of the vPIC vehicle_types (for example, \"Passenger Car\", \"Truck\", or \"Multipurpose Passenger Vehicle (MPV)\") Returns: A list of ``Model``s Raises: ValueError: if ``year`` is earlier than 2016 Examples: >>> get_models_for_make(\"TESLA\", model_year=2020) [ Model( model_id=1685, model='Model S', make_id=441, make='TESLA', vehicle_type_id=None ), Model( model_id=10199, model='Model X', make_id=441, make='TESLA', vehicle_type_id=None ), Model( model_id=17834, model='Model 3', make_id=441, make='TESLA', vehicle_type_id=None ), Model( model_id=27027, model='Model Y', make_id=441, make='TESLA', vehicle_type_id=None ) ] VehicleTypeId and VehicleType are only returned when you specify vehicle_type. \"\"\" models = self . _client . get_models_for_make ( make , model_year , vehicle_type ) schema = desert . schema ( Model , meta = self . _meta ) return [ schema . load ( snake_case ( m )) for m in models ] get_parts ( self , cfr_part , from_date , to_date , page = 1 ) Returns a list of vehicle documentation submitted by manufacturers. Manufacturers provide vehicle information to NHTSA to comply with these regulations: 49 CFR Part 565 (Vehicle Identification Number Guidance) 49 CFR Part 566 (Manufacturer Identification \u2013 Reporting Requirements) This provides a list of documents submitted in a date range. Up to 1,000 results will be returned at a time. Parameters: Name Type Description Default cfr_part str '565' to return 49 CFR Part 565 submissions; '566' to return 49 CFR Part 566 submissions required from_date str the beginning of the date range to search required to_date str the end of the date range to search required page int results are paginated; this is page number to return 1 Returns: Type Description List[vpic.models.Document] A list of Document s registered with vPIC. Exceptions: Type Description ValueError if cfr_part is missing Examples: >>> get_parts ( '565' , '2015-01-01' , '2015-05-05' , 1 ) [ Document ( cover_letter_url = '' , letter_date = '1/1/2015' , manufacturer_id = 959 , manufacturer = 'MASERATI NORTH AMERICA, INC.' , name = 'ORG13044' , url = '...' , type = None , model_year_from = 20 , model_year_to = None ), ... ] Source code in vpic/typed_client.py def get_parts ( self , cfr_part : str , from_date : str , to_date : str , page : int = 1 ) -> List [ Document ]: \"\"\"Returns a list of vehicle documentation submitted by manufacturers. Manufacturers provide vehicle information to NHTSA to comply with these regulations: * 49 CFR Part 565 (Vehicle Identification Number Guidance) * 49 CFR Part 566 (Manufacturer Identification \u2013 Reporting Requirements) This provides a list of documents submitted in a date range. Up to 1,000 results will be returned at a time. Args: cfr_part: '565' to return 49 CFR Part 565 submissions; '566' to return 49 CFR Part 566 submissions from_date: the beginning of the date range to search to_date: the end of the date range to search page: results are paginated; this is page number to return Returns: A list of ``Document``s registered with vPIC. Raises: ValueError: if ``cfr_part`` is missing Examples: >>> get_parts('565', '2015-01-01', '2015-05-05', 1) [ Document( cover_letter_url='', letter_date='1/1/2015', manufacturer_id=959, manufacturer='MASERATI NORTH AMERICA, INC.', name='ORG13044', url='...', type=None, model_year_from=20, model_year_to=None ), ... ] \"\"\" documents = self . _client . get_parts ( cfr_part , from_date , to_date , page ) for doc in documents : # snake_case doesn't handle lowerUPPER doc [ \"CoverLetterUrl\" ] = doc [ \"CoverLetterURL\" ] del doc [ \"CoverLetterURL\" ] schema = desert . schema ( Document , meta = self . _meta ) return [ schema . load ( snake_case ( doc )) for doc in documents ] get_vehicle_types_for_make ( self , make ) Returns vehicle types produced by a make or make Parameters: Name Type Description Default make Union[str, int] Pass the MakeId (int) or the complete make name (str) to return vehicle types for a single manufacturer. Pass a partial make name to return vehicle types for all makes that match the partial name. When you pass a make name, results will include the MakeId and MakeName because you may get vehicle_types for more than one make. required Returns: Type Description List[vpic.models.VehicleType] A list of VehicleType s produced by the make (s) Exceptions: Type Description ValueError if make is missing Examples: >>> get_vehicle_types_for_make ( 474 ) [ VehicleType ( vehicle_type_id = 1 , vehicle_type = 'Motorcycle' , make_id = None , make = None ), VehicleType ( vehicle_type_id = 2 , vehicle_type = 'Passenger Car' , make_id = None , make = None ), VehicleType ( vehicle_type_id = 3 , vehicle_type = 'Truck ' , make_id = None , make = None ), VehicleType ( vehicle_type_id = 7 , vehicle_type = 'Multipurpose Passenger Vehicle (MPV)' , make_id = None , make = None ), VehicleType ( vehicle_type_id = 9 , vehicle_type = 'Low Speed Vehicle (LSV)' , make_id = None , make = None ) ] Source code in vpic/typed_client.py def get_vehicle_types_for_make ( self , make : Union [ str , int ]) -> List [ VehicleType ]: \"\"\"Returns vehicle types produced by a make or make Args: make: Pass the MakeId (int) or the complete make name (str) to return vehicle types for a single manufacturer. Pass a partial make name to return vehicle types for all makes that match the partial name. When you pass a make name, results will include the MakeId and MakeName because you may get vehicle_types for more than one make. Returns: A list of ``VehicleType``s produced by the ``make``(s) Raises: ValueError: if ``make`` is missing Examples: >>> get_vehicle_types_for_make(474) [ VehicleType( vehicle_type_id=1, vehicle_type='Motorcycle', make_id=None, make=None ), VehicleType( vehicle_type_id=2, vehicle_type='Passenger Car', make_id=None, make=None ), VehicleType( vehicle_type_id=3, vehicle_type='Truck ', make_id=None, make=None ), VehicleType( vehicle_type_id=7, vehicle_type='Multipurpose Passenger Vehicle (MPV)', make_id=None, make=None ), VehicleType( vehicle_type_id=9, vehicle_type='Low Speed Vehicle (LSV)', make_id=None, make=None ) ] \"\"\" schema = desert . schema ( VehicleType , meta = self . _meta ) results = self . _client . get_vehicle_types_for_make ( make ) snake_cased = [ snake_case ( r ) for r in results ] return [ schema . load ( sc ) for sc in snake_cased ] get_vehicle_variable_list ( self ) Return a list of vehicle variables tracked by vPIC Returns: Type Description List[vpic.models.Variable] A list of Variable s Examples: >>> get_vehicle_variable_list () [ Variable ( id = 1 , name = 'Other Battery Info' , data_type = 'string' , descr ... ), Variable ( id = 2 , name = 'Battery Type' , data_type = 'lookup' , description ... ), Variable ( id = 3 , name = 'Bed Type' , data_type = 'lookup' , description = '<p...), Variable ( id = 4 , name = 'Cab Type' , data_type = 'lookup' , description = '<p...), Variable ( id = 5 , name = 'Body Class' , data_type = 'lookup' , description = '...), Variable ( id = 9 , name = 'Engine Number of Cylinders' , data_type = 'int' , ... ), ] Source code in vpic/typed_client.py def get_vehicle_variable_list ( self ) -> List [ Variable ]: \"\"\"Return a list of vehicle variables tracked by vPIC Returns: A list of ``Variable``s Examples: >>> get_vehicle_variable_list() [ Variable(id=1, name='Other Battery Info', data_type='string', descr...), Variable(id=2, name='Battery Type', data_type='lookup', description...), Variable(id=3, name='Bed Type', data_type='lookup', description='<p...), Variable(id=4, name='Cab Type', data_type='lookup', description='<p...), Variable(id=5, name='Body Class', data_type='lookup', description='...), Variable(id=9, name='Engine Number of Cylinders', data_type='int', ...), ] \"\"\" variables = self . _client . get_vehicle_variable_list () schema = desert . schema ( Variable , meta = self . _meta ) return [ schema . load ( snake_case ( v )) for v in variables ] get_vehicle_variable_values_list ( self , variable_name ) Return the values for a vehicle variable Parameters: Name Type Description Default variable_name str the name of the vehicle variable required Returns: Type Description List[vpic.models.Value] A list of Values s Exceptions: Type Description ValueError if variable_name is missing Examples: >>> get_vehicle_variable_values_list ( \"Vehicle Type\" ) [ Value ( element_name = \"Vehicle Type\" , id = 1 , name = \"Motorcycle\" ), Value ( element_name = \"Vehicle Type\" , id = 2 , name = \"Passenger Car\" ), Value ( element_name = \"Vehicle Type\" , id = 3 , name = \"Truck \" ), Value ( element_name = \"Vehicle Type\" , id = 5 , name = \"Bus\" ), Value ( element_name = \"Vehicle Type\" , id = 6 , name = \"Trailer\" ), Value ( element_name = \"Vehicle Type\" , id = 7 , name = \"Multipurpose P...\" ), Value ( element_name = \"Vehicle Type\" , id = 9 , name = \"Low Speed Vehi...\" ), Value ( element_name = \"Vehicle Type\" , id = 10 , name = \"Incomplete Ve...\" ), Value ( element_name = \"Vehicle Type\" , id = 13 , name = \"Off Road Vehicle\" ) ] Source code in vpic/typed_client.py def get_vehicle_variable_values_list ( self , variable_name : str ) -> List [ Value ]: \"\"\"Return the values for a vehicle variable Args: variable_name: the name of the vehicle variable Returns: A list of ``Values``s Raises: ValueError: if ``variable_name`` is missing Examples: >>> get_vehicle_variable_values_list(\"Vehicle Type\") [ Value(element_name=\"Vehicle Type\", id=1, name=\"Motorcycle\"), Value(element_name=\"Vehicle Type\", id=2, name=\"Passenger Car\"), Value(element_name=\"Vehicle Type\", id=3, name=\"Truck \"), Value(element_name=\"Vehicle Type\", id=5, name=\"Bus\"), Value(element_name=\"Vehicle Type\", id=6, name=\"Trailer\"), Value(element_name=\"Vehicle Type\", id=7, name=\"Multipurpose P...\"), Value(element_name=\"Vehicle Type\", id=9, name=\"Low Speed Vehi...\"), Value(element_name=\"Vehicle Type\", id=10, name=\"Incomplete Ve...\"), Value(element_name=\"Vehicle Type\", id=13, name=\"Off Road Vehicle\") ] \"\"\" values = self . _client . get_vehicle_variable_values_list ( variable_name ) schema = desert . schema ( Value , meta = self . _meta ) return [ schema . load ( snake_case ( v )) for v in values ] get_wmis_for_manufacturer ( self , manufacturer , vehicle_type = None ) Returns the WMIs for one or all manufacturers Parameters: Name Type Description Default manufacturer Union[str, int] Pass the Manufacturer Id (int) or the complete manufacturer name (str) to return WMIs for a single manufacturer. Pass a partial name to return WMIs for all manufacturers with names that include the partial name. required vehicle_type Union[str, int] Pass the vehicle_type Id (int) or complete vehicle_type name to return WMIs for that vehicle_type. Pass a partial name to return WMIs for vehicle_types matching that name. None Returns: Type Description List[vpic.models.WMI] A list of WorldManufacturerIndex with information about the manufacturers. Exceptions: Type Description ValueError if manufacturer is missing Examples: >>> get_wmis_for_manufacturer ( 'Honda' ) [ WorldManufacturerIndex ( created_on = '2015-03-26' , date_available_to_public = '2015-01-01' , manufacturer = 'HONDA MOTOR CO., LTD' , updated_on = '2015-06-04' , vehicle_type = 'Passenger Car' , wmi = 'JHM' , common_name = '' , country = None , make = '' , manufacturer_id = 987 , parent_company_name = '' , url = '' ), ... ] Source code in vpic/typed_client.py def get_wmis_for_manufacturer ( self , manufacturer : Union [ str , int ], vehicle_type : Optional [ Union [ str , int ]] = None , ) -> List [ WMI ]: \"\"\"Returns the WMIs for one or all manufacturers Args: manufacturer: Pass the Manufacturer Id (int) or the complete manufacturer name (str) to return WMIs for a single manufacturer. Pass a partial name to return WMIs for all manufacturers with names that include the partial name. vehicle_type: Pass the vehicle_type Id (int) or complete vehicle_type name to return WMIs for that vehicle_type. Pass a partial name to return WMIs for vehicle_types matching that name. Returns: A list of ``WorldManufacturerIndex`` with information about the manufacturers. Raises: ValueError: if ``manufacturer`` is missing Examples: >>> get_wmis_for_manufacturer('Honda') [ WorldManufacturerIndex( created_on='2015-03-26', date_available_to_public='2015-01-01', manufacturer='HONDA MOTOR CO., LTD', updated_on='2015-06-04', vehicle_type='Passenger Car', wmi='JHM', common_name='', country=None, make='', manufacturer_id=987, parent_company_name='', url='' ), ... ] \"\"\" wmis = self . _client . get_wmis_for_manufacturer ( manufacturer , vehicle_type ) schema = desert . schema ( WMI , meta = self . _meta ) return [ schema . load ( snake_case ( wmi )) for wmi in wmis ]","title":"TypedClient"},{"location":"typed_client.html#typedclient-module","text":"","title":"TypedClient module"},{"location":"typed_client.html#vpic.typed_client.TypedClient","text":"A client library for the U.S. NHTSA vPIC API TypedClient returns model objects instead of JSON responses. If you need the original vPIC JSON responses, use vpic.Client . A client library for the United States National Highway Traffic Safety Administration (NHTSA) Vehicle Product Information Catalog (vPIC) Vehicle Listing API. Use this to gather information on vehicles and their specifications, and to decode VINs to extract information for specific vehicles. vPIC has information about these types of vehicles sold or imported in the USA: Bus Incomplete Vehicle Low Speed Vehicle (LSV) Motorcycle Multipurpose Passenger Vehicle (MPV) Passenger Car Trailer Truck vPIC has all of the information about how manufacturers assign a VIN that encodes the vehicles characteristics. Vehicle manufacturers provide this information to NHTSA under U.S. law 49 CFR Part 565. The API available 24/7, is free to use, and does not require registration. NHTSA uses automatic traffic rate controls to maintain the performance of the API and their websites that use the API. NHTSA occasionally adds, removes, or renames variables in vPIC API responses. This class uses Marshmallow to deserialize the response. When a variable is missing or renamed, methods in this class raise marshmallow.exceptions.ValidationError . If you instantiate this class with unknown='RAISE', methods will also raise marshmallow.exceptions.ValidationError when the vPIC response includes a new variable that isn't defined in the model (models.py). See https://vpic.nhtsa.dot.gov/api for more on the API. Attributes: Name Type Description host Hostname, including http(s)://, of the vPIC instance to query. unknowns exclude new API response variables ('EXCLUDE'), or raise an exception ('RAISE') instead","title":"TypedClient"},{"location":"typed_client.html#vpic.typed_client.TypedClient.decode_vin","text":"Decode a 17-digit Vehicle Identification Number (VIN) or partial VIN. Decode the make, model, series, trim, and other vehicle information from VIN. Model year is required for pre-1980 vehicles, though vPIC recommends that you always pass it. If you don't have a complete 17-digit VIN, you can pass a partial VIN, using asterisk (*) for missing characters. The VIN check digit (the 9th character) isn't required for partial VINs. The shorter the partial VIN, the less vehicle information you'll receive in the response. See get_vehicle_variable_list for the variables returned here. Parameters: Name Type Description Default vin str A 17-digit VIN or partial VIN. Use asterisk for missing characters. required model_year Optional[int] The vehicle's model year. Recommended, but not required. None extend Optional[bool] If True, response will include variables for other NHTSA programs like NCSA. Defaults to False. False Returns: Type Description Vehicle A Vehicle with the information decoded from vin . Exceptions: Type Description ValueError if vin is missing or isn't 6 to 17 characters long. ValueError if model_year is earlier than 1981. Examples: >>> decode_vin ( '1FTMW1T88MFA00001' ) Vehicle ( abs = \"\" , ... body_cab_type = \"Crew/ Super Crew/ Crew Max\" , body_class = \"Pickup\" , brake_system_desc = \"\" , brake_system_type = \"Hydraulic\" , ... displacement_cc = \"3500.0\" , displacement_ci = \"213.58310433156\" , displacement_l = \"3.5\" , ... drive_type = \"4WD/4-Wheel Drive/4x4\" , ... engine_configuration = \"V-Shaped\" , engine_cycles = \"\" , engine_cylinders = \"6\" , engine_hp = \"375\" , engine_hp_to = \"\" , engine_kw = \"279.6375\" , engine_manufacturer = \"Ford\" , engine_model = \"GTDI\" , entertainment_system = \"\" , error_code = \"0\" , error_text = \"0 - VIN decoded clean. Check Digit (9th position) is co...\" , ... make = \"FORD\" , make_id = \"460\" , manufacturer = \"FORD MOTOR COMPANY, USA\" , manufacturer_id = \"976\" , model = \"F-150\" , model_id = \"1801\" , model_year = \"2021\" , motorcycle_chassis_type = \"Not Applicable\" , motorcycle_suspension_type = \"Not Applicable\" , ... plant_city = \"DEARBORN\" , plant_company_name = \"\" , plant_country = \"UNITED STATES (USA)\" , plant_state = \"MICHIGAN\" , ... series = \"F-Series\" , series2 = \"\" , ... trim = \"SuperCrew-SSV\" , ... vin = \"1FTMW1T88MFA00001\" , ... vehicle_type = \"TRUCK \" , ... ) Source code in vpic/typed_client.py def decode_vin ( self , vin : str , model_year : Optional [ int ] = None , extend : Optional [ bool ] = False ) -> Vehicle : \"\"\"Decode a 17-digit Vehicle Identification Number (VIN) or partial VIN. Decode the make, model, series, trim, and other vehicle information from VIN. Model year is required for pre-1980 vehicles, though vPIC recommends that you always pass it. If you don't have a complete 17-digit VIN, you can pass a partial VIN, using asterisk (*) for missing characters. The VIN check digit (the 9th character) isn't required for partial VINs. The shorter the partial VIN, the less vehicle information you'll receive in the response. See get_vehicle_variable_list for the variables returned here. Args: vin: A 17-digit VIN or partial VIN. Use asterisk for missing characters. model_year: The vehicle's model year. Recommended, but not required. extend: If True, response will include variables for other NHTSA programs like NCSA. Defaults to False. Returns: A ``Vehicle`` with the information decoded from ``vin``. Raises: ValueError: if ``vin`` is missing or isn't 6 to 17 characters long. ValueError: if ``model_year`` is earlier than 1981. Example: >>> decode_vin('1FTMW1T88MFA00001') Vehicle( abs=\"\", ... body_cab_type=\"Crew/ Super Crew/ Crew Max\", body_class=\"Pickup\", brake_system_desc=\"\", brake_system_type=\"Hydraulic\", ... displacement_cc=\"3500.0\", displacement_ci=\"213.58310433156\", displacement_l=\"3.5\", ... drive_type=\"4WD/4-Wheel Drive/4x4\", ... engine_configuration=\"V-Shaped\", engine_cycles=\"\", engine_cylinders=\"6\", engine_hp=\"375\", engine_hp_to=\"\", engine_kw=\"279.6375\", engine_manufacturer=\"Ford\", engine_model=\"GTDI\", entertainment_system=\"\", error_code=\"0\", error_text=\"0 - VIN decoded clean. Check Digit (9th position) is co...\", ... make=\"FORD\", make_id=\"460\", manufacturer=\"FORD MOTOR COMPANY, USA\", manufacturer_id=\"976\", model=\"F-150\", model_id=\"1801\", model_year=\"2021\", motorcycle_chassis_type=\"Not Applicable\", motorcycle_suspension_type=\"Not Applicable\", ... plant_city=\"DEARBORN\", plant_company_name=\"\", plant_country=\"UNITED STATES (USA)\", plant_state=\"MICHIGAN\", ... series=\"F-Series\", series2=\"\", ... trim=\"SuperCrew-SSV\", ... vin=\"1FTMW1T88MFA00001\", ... vehicle_type=\"TRUCK \", ... ) \"\"\" schema = desert . schema ( Vehicle , meta = self . _meta ) return schema . load ( snake_case ( self . _client . decode_vin ( vin , model_year , extend )))","title":"decode_vin()"},{"location":"typed_client.html#vpic.typed_client.TypedClient.decode_vin_batch","text":"Decode a batch of 17-digit VINs or partial VINs. Model year is required for pre-1980 vehicles, though vPIC recommends that you always pass it. If you don't have a complete 17-digit VIN, you can pass a partial VIN, using asterisk (*) for missing characters. The VIN check digit (the 9th character) isn't required for partial VINs. The shorter the partial VIN, the less vehicle information you'll receive in the response. Vehicle variables will be returned in key-value pairs, the same format returned by decode_vin(.., flatten=True). See get_vehicle_variable_list for the variables returned here. Parameters: Name Type Description Default vins List[str] A list of 17-digit VIN or partial VINs and optional model year. Use asterisk for missing characters. For example: [\"VIN, model_year\", \"VIN, model_year\", ...] required Returns: Type Description List[vpic.models.Vehicle] A list of Vehicle s with the information decoded from vins . Exceptions: Type Description ValueError if vin is missing or isn't 6 to 17 characters long. ValueError if model_year is earlier than 1981. Examples: >>> decode_vin_batch ([ \"5UXWX7C5*BA,2011\" , \"5YJSA3DS*EF\" ]) [ Vehicle ( ... ), Vehicle ( ... )] Source code in vpic/typed_client.py def decode_vin_batch ( self , vins : List [ str ]) -> List [ Vehicle ]: \"\"\"Decode a batch of 17-digit VINs or partial VINs. Model year is required for pre-1980 vehicles, though vPIC recommends that you always pass it. If you don't have a complete 17-digit VIN, you can pass a partial VIN, using asterisk (*) for missing characters. The VIN check digit (the 9th character) isn't required for partial VINs. The shorter the partial VIN, the less vehicle information you'll receive in the response. Vehicle variables will be returned in key-value pairs, the same format returned by decode_vin(.., flatten=True). See get_vehicle_variable_list for the variables returned here. Args: vins: A list of 17-digit VIN or partial VINs and optional model year. Use asterisk for missing characters. For example: [\"VIN, model_year\", \"VIN, model_year\", ...] Returns: A list of ``Vehicle``s with the information decoded from ``vins``. Raises: ValueError: if ``vin`` is missing or isn't 6 to 17 characters long. ValueError: if ``model_year`` is earlier than 1981. Example: >>> decode_vin_batch([\"5UXWX7C5*BA,2011\", \"5YJSA3DS*EF\"]) [Vehicle(...), Vehicle(...)] \"\"\" vehicles = self . _client . decode_vin_batch ( vins ) schema = desert . schema ( Vehicle , meta = self . _meta ) return [ schema . load ( snake_case ( v )) for v in vehicles ]","title":"decode_vin_batch()"},{"location":"typed_client.html#vpic.typed_client.TypedClient.decode_wmi","text":"Decode a WMI to get manufacturer information Provides information on the World Manufacturer Identifier for a specific WMI code. Parameters: Name Type Description Default wmi str A 3-character or 6-character World Manufacturer Index code. Large volume manufacturers usually have a 3 character WMI representing positions 1 to 3 (\"JTD\") of a VIN. Smaller manufacturers have a 6 character WMI representing positions 1 to 3 and 12 to 14 of a VIN. required Returns: Type Description WMI A WorldManufacturerIndex with information about the manufacturer. Exceptions: Type Description ValueError if wmi is missing or isn't 3 or 6 characters long. Examples: >>> decode_wmi ( '1FT' ) WorldManufacturerIndex ( common_name = \"Ford\" , created_on = \"2015-03-23\" , date_available_to_public = \"2015-01-01\" , make = \"FORD\" , manufacturer = \"FORD MOTOR COMPANY, USA\" , parent_company_name = \"\" , updated_on = None , url = \"http://www.ford.com/\" , vehicle_type = \"Truck \" , ) Source code in vpic/typed_client.py def decode_wmi ( self , wmi : str ) -> WMI : \"\"\"Decode a WMI to get manufacturer information Provides information on the World Manufacturer Identifier for a specific WMI code. Args: wmi: A 3-character or 6-character World Manufacturer Index code. Large volume manufacturers usually have a 3 character WMI representing positions 1 to 3 (\"JTD\") of a VIN. Smaller manufacturers have a 6 character WMI representing positions 1 to 3 and 12 to 14 of a VIN. Returns: A ``WorldManufacturerIndex`` with information about the manufacturer. Raises: ValueError: if ``wmi`` is missing or isn't 3 or 6 characters long. Example: >>> decode_wmi('1FT') WorldManufacturerIndex( common_name=\"Ford\", created_on=\"2015-03-23\", date_available_to_public=\"2015-01-01\", make=\"FORD\", manufacturer=\"FORD MOTOR COMPANY, USA\", parent_company_name=\"\", updated_on=None, url=\"http://www.ford.com/\", vehicle_type=\"Truck \", ) \"\"\" schema = desert . schema ( WMI , meta = self . _meta ) return schema . load ( snake_case ( self . _client . decode_wmi ( wmi )))","title":"decode_wmi()"},{"location":"typed_client.html#vpic.typed_client.TypedClient.get_all_makes","text":"Returns all of the makes registered with vPIC. Returns: Type Description List[vpic.models.Make] A list of all of the Make s registered with vPIC. Examples: >>> get_all_makes () [ Make ( make_id = 440 , make = 'ASTON MARTIN' ), Make ( make_id = 441 , make = 'TESLA' ), Make ( make_id = 442 , make = 'JAGUAR' ), Make ( make_id = 443 , make = 'MASERATI' ), Make ( make_id = 444 , make = 'LAND ROVER' ), Make ( make_id = 445 , make = 'ROLLS ROYCE' ), Make ( make_id = 446 , make = 'BUELL (EBR)' ), Make ( make_id = 447 , make = 'JIALING' ), Make ( make_id = 448 , make = 'TOYOTA' ), Make ( make_id = 449 , make = 'MERCEDES-BENZ' ), ... ] Source code in vpic/typed_client.py def get_all_makes ( self ) -> List [ Make ]: \"\"\"Returns all of the makes registered with vPIC. Returns: A list of all of the ``Make``s registered with vPIC. Examples: >>> get_all_makes() [ Make(make_id=440, make='ASTON MARTIN'), Make(make_id=441, make='TESLA'), Make(make_id=442, make='JAGUAR'), Make(make_id=443, make='MASERATI'), Make(make_id=444, make='LAND ROVER'), Make(make_id=445, make='ROLLS ROYCE'), Make(make_id=446, make='BUELL (EBR)'), Make(make_id=447, make='JIALING'), Make(make_id=448, make='TOYOTA'), Make(make_id=449, make='MERCEDES-BENZ'), ... ] \"\"\" makes = self . _client . get_all_makes () schema = desert . schema ( Make , meta = self . _meta ) return [ schema . load ( snake_case ( make )) for make in makes ]","title":"get_all_makes()"},{"location":"typed_client.html#vpic.typed_client.TypedClient.get_all_manufacturers","text":"Return a list of vPIC manufacturers of the given manufacturer_type. This provides a list of all the Manufacturers available in vPIC Dataset. See get_vehicle_variable_values_list(\"Manufacturer Type\") for the list of manufacturer types. Parameters: Name Type Description Default manufacturer_type Optional[str] The manufacturer type, which is Incomplete Vehicles, Completed Vehicle Manufacturer, Incomplete Vehicle Manufacturer, Intermediate Manufacturer, Final-Stage Manufacturer, Alterer, Replica Vehicle Manufacturer. You can pass the full type name, or a substring of the type. None page int results are paginated; this is the page number to return 1 Returns: Type Description List[vpic.models.Manufacturer] A list of the Manufacturers s registered with vPIC. Examples: >>> get_all_manufacturers ( \"Completed Vehicle\" , 1 ) [ { \"Country\" : \"UNITED STATES (USA)\" , \"Mfr_CommonName\" : \"Tesla\" , \"Mfr_ID\" : 955 , \"Mfr_Name\" : \"TESLA, INC.\" , \"VehicleTypes\" : [ { \"IsPrimary\" : true , \"Name\" : \"Passenger Car\" }, { \"IsPrimary\" : false , \"Name\" : \"Multipurpose Passenger Vehicle (MPV)\" } }, ... ] Source code in vpic/typed_client.py def get_all_manufacturers ( self , manufacturer_type : Optional [ str ] = None , page : int = 1 ) -> List [ Manufacturer ]: \"\"\"Return a list of vPIC manufacturers of the given manufacturer_type. This provides a list of all the Manufacturers available in vPIC Dataset. See ``get_vehicle_variable_values_list(\"Manufacturer Type\")`` for the list of manufacturer types. Args: manufacturer_type: The manufacturer type, which is Incomplete Vehicles, Completed Vehicle Manufacturer, Incomplete Vehicle Manufacturer, Intermediate Manufacturer, Final-Stage Manufacturer, Alterer, Replica Vehicle Manufacturer. You can pass the full type name, or a substring of the type. page: results are paginated; this is the page number to return Returns: A list of the ``Manufacturers``s registered with vPIC. Examples: >>> get_all_manufacturers(\"Completed Vehicle\", 1) [ { \"Country\": \"UNITED STATES (USA)\", \"Mfr_CommonName\": \"Tesla\", \"Mfr_ID\": 955, \"Mfr_Name\": \"TESLA, INC.\", \"VehicleTypes\": [ { \"IsPrimary\": true, \"Name\": \"Passenger Car\" }, { \"IsPrimary\": false, \"Name\": \"Multipurpose Passenger Vehicle (MPV)\" } }, ... ] \"\"\" raise NotImplementedError","title":"get_all_manufacturers()"},{"location":"typed_client.html#vpic.typed_client.TypedClient.get_equipment_plant_codes","text":"Returns a list of plants that manufacture certain vehicle equipment. Plants have a unique three-character U.S. Department of Transportation (DOT) code. vPIC API documentation says this API only accepts 2016 and later. Parameters: Name Type Description Default year int must be 2016 or later required equipment_type int return plants that manufacture one of these equipment types: 1 = Tires; 3 = Brake Hoses; 13 = Glazing; 16 = Retread required report_type str must be one of New = plants whose code was assigned during the selected year Updated = plants whose data was modified during the selected year Closed = plants that are no longer active All = all active and closed plants, regardless of year 'All' Returns: Type Description List[vpic.models.PlantCode] A list of PlantCode s that manufacture the equipment_type Exceptions: Type Description ValueError if year is earlier than 2016 Examples: >>> get_equipment_plant_codes ( 2016 , 1 ) [ PlantCode ( address = '2950 INTERNATIONAL BLVD.' , city = 'CLARKSVILLE' , ... ), PlantCode ( address = '1850 BARTON FERRY ROAD' , city = 'WEST POINT' , cou ... ), PlantCode ( address = 'No. 52 Street 536, Bau Tran Hamlet, Nhuan Duc C...), PlantCode ( address = 'NO. 23, HAILAR EAST ROAD' , city = 'HUHHOT' , count ... ), PlantCode ( address = 'NO. 9 EAST BEISAN ROAD' , city = 'SHENYANG' , count ... ), PlantCode ( address = 'HONGSHANZUI ECONOMIC DEV. ZONE' , city = 'PINGQUAN...), PlantCode ( address = 'QIANLIU VILLAGE XIADIAN TOWN' , city = 'CHANGYI CI...), PlantCode ( address = 'DOWANG TOWN' , city = 'GUANGRAO COUNTY' , country = '...), PlantCode ( address = 'NO.1 HUIXIN ROAD' , city = 'GAOTANG' , country = 'CHI...), PlantCode ( address = 'NO.668 LAMEI ROAD,JIESHI TOWN,BANAN DISTRICT' , ... ), ] Source code in vpic/typed_client.py def get_equipment_plant_codes ( self , year : int , equipment_type : int , report_type : str = \"All\" ) -> List [ PlantCode ]: \"\"\"Returns a list of plants that manufacture certain vehicle equipment. Plants have a unique three-character U.S. Department of Transportation (DOT) code. vPIC API documentation says this API only accepts 2016 and later. Args: year: must be 2016 or later equipment_type: return plants that manufacture one of these equipment types: 1 = Tires; 3 = Brake Hoses; 13 = Glazing; 16 = Retread report_type: must be one of New = plants whose code was assigned during the selected year Updated = plants whose data was modified during the selected year Closed = plants that are no longer active All = all active and closed plants, regardless of year Returns: A list of ``PlantCode``s that manufacture the equipment_type Raises: ValueError: if ``year`` is earlier than 2016 Example: >>> get_equipment_plant_codes(2016, 1) [ PlantCode(address='2950 INTERNATIONAL BLVD.', city='CLARKSVILLE', ...), PlantCode(address='1850 BARTON FERRY ROAD', city='WEST POINT', cou...), PlantCode(address='No. 52 Street 536, Bau Tran Hamlet, Nhuan Duc C...), PlantCode(address='NO. 23, HAILAR EAST ROAD', city='HUHHOT', count...), PlantCode(address='NO. 9 EAST BEISAN ROAD', city='SHENYANG', count...), PlantCode(address='HONGSHANZUI ECONOMIC DEV. ZONE', city='PINGQUAN...), PlantCode(address='QIANLIU VILLAGE XIADIAN TOWN', city='CHANGYI CI...), PlantCode(address='DOWANG TOWN', city='GUANGRAO COUNTY', country='...), PlantCode(address='NO.1 HUIXIN ROAD', city='GAOTANG', country='CHI...), PlantCode(address='NO.668 LAMEI ROAD,JIESHI TOWN,BANAN DISTRICT', ...), ] \"\"\" plant_codes = self . _client . get_equipment_plant_codes ( year , equipment_type , report_type ) schema = desert . schema ( PlantCode , meta = self . _meta ) return [ schema . load ( snake_case ( pc )) for pc in plant_codes ]","title":"get_equipment_plant_codes()"},{"location":"typed_client.html#vpic.typed_client.TypedClient.get_makes_for_manufacturer","text":"Returns makes produced by a manufacturer or manufacturers. Parameters: Name Type Description Default manufacturer Union[str, int] Pass the Manufacturer Id (int) or the complete manufacturer name (str) to return detail for a single manufacturer. Pass a partial name to return manufacturers with names that include the partial name. required model_year Optional[int] Pass a model year to return only those makes made by the manufacturer for that model year. None Returns: Type Description List[vpic.models.Make] A list of Makes s produced by the manufacturer(s) Exceptions: Type Description ValueError if manufacturer is missing Examples: >>> get_makes_for_manufacturer ( 988 ) [ Make ( make_id : 474 make : 'HONDA' manufacturer_id : None manufacturer : 'HONDA DEVELOPMENT & MANUFACTURING OF AMERICA...' ), Make ( make_id = 475 , make = 'ACURA' , manufacturer_id = None , manufacturer = 'HONDA DEVELOPMENT & MANUFACTURING OF AMERICA...' ) ... ] Source code in vpic/typed_client.py def get_makes_for_manufacturer ( self , manufacturer : Union [ str , int ], model_year : Optional [ int ] = None ) -> List [ Make ]: \"\"\"Returns makes produced by a manufacturer or manufacturers. Args: manufacturer: Pass the Manufacturer Id (int) or the complete manufacturer name (str) to return detail for a single manufacturer. Pass a partial name to return manufacturers with names that include the partial name. model_year: Pass a model year to return only those makes made by the manufacturer for that model year. Returns: A list of ``Makes``s produced by the manufacturer(s) Raises: ValueError: if ``manufacturer`` is missing Examples: >>> get_makes_for_manufacturer(988) [ Make( make_id:474 make:'HONDA' manufacturer_id:None manufacturer:'HONDA DEVELOPMENT & MANUFACTURING OF AMERICA...' ), Make( make_id=475, make='ACURA', manufacturer_id=None, manufacturer='HONDA DEVELOPMENT & MANUFACTURING OF AMERICA...' ) ... ] \"\"\" makes = self . _client . get_makes_for_manufacturer ( manufacturer , model_year ) schema = desert . schema ( Make , meta = self . _meta ) return [ schema . load ( snake_case ( m )) for m in makes ]","title":"get_makes_for_manufacturer()"},{"location":"typed_client.html#vpic.typed_client.TypedClient.get_makes_for_vehicle_type","text":"Returns makes that produce a vehicle_type Parameters: Name Type Description Default vehicle_type str A vPIC vehicle_type. For example, \"Passenger Car\", \"Truck\", or \"Multipurpose Passenger Vehicle (MPV)\". If you pass a partial vehicle_type, for example \"Passenger\", results will include makes for all matching vehicle types. Matching is not case sensitive. required Returns: Type Description List[vpic.models.Make] A list of Makes s that produce the vehicle_type Exceptions: Type Description ValueError if vehicle_type is missing Examples: >>> get_makes_for_vehicle_type ( 'Car' ) [ Make ( make_id = 440 , make = 'ASTON MARTIN' , manufacturer_id = None , manufacturer = None , vehicle_type_id = 2 , vehicle_type = 'Passenger Car' ) ... ] Source code in vpic/typed_client.py def get_makes_for_vehicle_type ( self , vehicle_type : str ) -> List [ Make ]: \"\"\"Returns makes that produce a vehicle_type Args: vehicle_type: A vPIC vehicle_type. For example, \"Passenger Car\", \"Truck\", or \"Multipurpose Passenger Vehicle (MPV)\". If you pass a partial vehicle_type, for example \"Passenger\", results will include makes for all matching vehicle types. Matching is not case sensitive. Returns: A list of ``Makes``s that produce the ``vehicle_type`` Raises: ValueError: if ``vehicle_type`` is missing Examples: >>> get_makes_for_vehicle_type('Car') [ Make( make_id=440, make='ASTON MARTIN', manufacturer_id=None, manufacturer=None, vehicle_type_id=2, vehicle_type='Passenger Car' ) ... ] \"\"\" makes = self . _client . get_makes_for_vehicle_type ( vehicle_type ) schema = desert . schema ( Make , meta = self . _meta ) return [ schema . load ( snake_case ( m )) for m in makes ]","title":"get_makes_for_vehicle_type()"},{"location":"typed_client.html#vpic.typed_client.TypedClient.get_manufacturer_details","text":"Returns details for one or more manufacturers. Parameters: Name Type Description Default manufacturer Union[str, int] Pass the Manufacturer Id (int) or the complete manufacturer name (str) to return detail for a single manufacturer. Pass a partial name to return manufacturers with names that include the partial name. required Returns: Type Description List[vpic.models.ManufacturerDetail] A list of ManufacturerDetail s for the manufacturer(s) Examples: >>> get_manufacturer_details ( 988 ) [ ManufacturerDetail ( manufacturer_id = 988 , manufacturer = \"HONDA DEVELOPMENT & MANUFACTURING OF AMER...\" , manufacturer_common_name = \"Honda\" , address = \"1919 Torrance Blvd.\" , address2 = None , city = \"Torrance\" , contact_email = \"...@ahm.honda.com\" , contact_fax = None , contact_phone = \"...\" , country = \"UNITED STATES (USA)\" , dbas = \"Marysville Auto Plant and East Liberty Auto Plant; ...\" , equipment_items = [], last_updated = \"/Date(1618422117803-0400)/\" , manufacturer_types = [ ManufacturerType ( name = \"Completed Vehicle Manufacturer\" ) ], other_manufacturer_details = None , postal_code = \"90501\" , primary_product = None , principal_first_name = \"...\" , principal_last_name = None , principal_position = \"President & CEO\" , state_province = \"CALIFORNIA\" , submitted_name = \"...\" , submitted_on = \"/Date(1618286400000-0400)/\" , submitted_position = \"Sr. Specialist, II\" , vehicle_types = [ VehicleType ( vehicle_type = \"Passenger Car\" , vehicle_type_id = None , make_id = None , make = None , gvwr_from = \"Class 1A: 3,000 lb or less (1,360 kg or less)\" , gvwr_to = \"Class 1D: 5,001 - 6,000 lb (2,268 - 2,722 kg)\" , is_primary = True ), VehicleType ( vehicle_type = \"Truck \" , vehicle_type_id = None , make_id = None , make = None , gvwr_from = \"Class 2E: 6,001 - 7,000 lb (2,722 - 3,175 kg)\" , gvwr_to = \"Class 2E: 6,001 - 7,000 lb (2,722 - 3,175 kg)\" , is_primary = False ), VehicleType ( vehicle_type = \"Multipurpose Passenger Vehicle (MPV)\" , vehicle_type_id = None , make_id = None , make = None , gvwr_from = \"Class 1B: 3,001 - 4,000 lb (1,360 - 1,814 kg)\" , gvwr_to = \"Class 2E: 6,001 - 7,000 lb (2,722 - 3,175 kg)\" , is_primary = False ) ] ) ] Source code in vpic/typed_client.py def get_manufacturer_details ( self , manufacturer : Union [ str , int ] ) -> List [ ManufacturerDetail ]: \"\"\"Returns details for one or more manufacturers. Args: manufacturer: Pass the Manufacturer Id (int) or the complete manufacturer name (str) to return detail for a single manufacturer. Pass a partial name to return manufacturers with names that include the partial name. Returns: A list of ``ManufacturerDetail``s for the manufacturer(s) Examples: >>> get_manufacturer_details(988) [ ManufacturerDetail( manufacturer_id=988, manufacturer=\"HONDA DEVELOPMENT & MANUFACTURING OF AMER...\", manufacturer_common_name=\"Honda\", address=\"1919 Torrance Blvd.\", address2=None, city=\"Torrance\", contact_email=\"...@ahm.honda.com\", contact_fax=None, contact_phone=\"...\", country=\"UNITED STATES (USA)\", dbas=\"Marysville Auto Plant and East Liberty Auto Plant; ...\", equipment_items=[], last_updated=\"/Date(1618422117803-0400)/\", manufacturer_types=[ ManufacturerType( name=\"Completed Vehicle Manufacturer\") ], other_manufacturer_details=None, postal_code=\"90501\", primary_product=None, principal_first_name=\"...\", principal_last_name=None, principal_position=\"President & CEO\", state_province=\"CALIFORNIA\", submitted_name=\"...\", submitted_on=\"/Date(1618286400000-0400)/\", submitted_position=\"Sr. Specialist, II\", vehicle_types=[ VehicleType( vehicle_type=\"Passenger Car\", vehicle_type_id=None, make_id=None, make=None, gvwr_from=\"Class 1A: 3,000 lb or less (1,360 kg or less)\", gvwr_to=\"Class 1D: 5,001 - 6,000 lb (2,268 - 2,722 kg)\", is_primary=True ), VehicleType( vehicle_type=\"Truck \", vehicle_type_id=None, make_id=None, make=None, gvwr_from=\"Class 2E: 6,001 - 7,000 lb (2,722 - 3,175 kg)\", gvwr_to=\"Class 2E: 6,001 - 7,000 lb (2,722 - 3,175 kg)\", is_primary=False ), VehicleType( vehicle_type=\"Multipurpose Passenger Vehicle (MPV)\", vehicle_type_id=None, make_id=None, make=None, gvwr_from=\"Class 1B: 3,001 - 4,000 lb (1,360 - 1,814 kg)\", gvwr_to=\"Class 2E: 6,001 - 7,000 lb (2,722 - 3,175 kg)\", is_primary=False ) ] ) ] \"\"\" results = self . _client . get_manufacturer_details ( manufacturer ) for r in results : r [ \"dbas\" ] = r [ \"DBAs\" ] del r [ \"DBAs\" ] # r[\"ManufacturerTypes\"] = [ # ManufacturerType(name=mt[\"Name\"]) for mt in r[\"ManufacturerTypes\"] # ] # r[\"VehicleTypes\"] = [ # VehicleType( # vehicle_type=vt[\"Name\"], # is_primary=vt[\"IsPrimary\"], # gvwr_from=vt[\"GVWRFrom\"], # gvwr_to=vt[\"GVWRTo\"], # ) # for vt in r[\"VehicleTypes\"] # ] # r[\"ManufacturerTypes\"] = [snake_case(mt) for mt in r[\"ManufacturerTypes\"]] # r[\"VehicleTypes\"] = [snake_case(vt) for vt in r[\"VehicleTypes\"]] schema = desert . schema ( ManufacturerDetail , meta = self . _meta ) snake_cased = [ snake_case ( r ) for r in results ] return [ schema . load ( sc ) for sc in snake_cased ]","title":"get_manufacturer_details()"},{"location":"typed_client.html#vpic.typed_client.TypedClient.get_models_for_make","text":"Return a list of models for a make or makes. Optionally filter the results by model year and vehicle type. Parameters: Name Type Description Default make Union[int, str] Pass the MakeId (int) or the complete make name (str) to return vehicle types for a single manufacturer. Pass a partial make name to return vehicle types for all makes that match the partial name. When you pass a make name, results will include the MakeId and MakeName because you may get vehicle_types for more than one make. required model_year Optional[int] pass this to return models made in this model year None vehicle_type Optional[str] one of the vPIC vehicle_types (for example, \"Passenger Car\", \"Truck\", or \"Multipurpose Passenger Vehicle (MPV)\") None Returns: Type Description List[vpic.models.Model] A list of Model s Exceptions: Type Description ValueError if year is earlier than 2016 Examples: >>> get_models_for_make ( \"TESLA\" , model_year = 2020 ) [ Model ( model_id = 1685 , model = 'Model S' , make_id = 441 , make = 'TESLA' , vehicle_type_id = None ), Model ( model_id = 10199 , model = 'Model X' , make_id = 441 , make = 'TESLA' , vehicle_type_id = None ), Model ( model_id = 17834 , model = 'Model 3' , make_id = 441 , make = 'TESLA' , vehicle_type_id = None ), Model ( model_id = 27027 , model = 'Model Y' , make_id = 441 , make = 'TESLA' , vehicle_type_id = None ) ] VehicleTypeId and VehicleType are only returned when you specify vehicle_type. Source code in vpic/typed_client.py def get_models_for_make ( self , make : Union [ int , str ], model_year : Optional [ int ] = None , vehicle_type : Optional [ str ] = None , ) -> List [ Model ]: \"\"\"Return a list of models for a make or makes. Optionally filter the results by model year and vehicle type. Args: make: Pass the MakeId (int) or the complete make name (str) to return vehicle types for a single manufacturer. Pass a partial make name to return vehicle types for all makes that match the partial name. When you pass a make name, results will include the MakeId and MakeName because you may get vehicle_types for more than one make. model_year: pass this to return models made in this model year vehicle_type: one of the vPIC vehicle_types (for example, \"Passenger Car\", \"Truck\", or \"Multipurpose Passenger Vehicle (MPV)\") Returns: A list of ``Model``s Raises: ValueError: if ``year`` is earlier than 2016 Examples: >>> get_models_for_make(\"TESLA\", model_year=2020) [ Model( model_id=1685, model='Model S', make_id=441, make='TESLA', vehicle_type_id=None ), Model( model_id=10199, model='Model X', make_id=441, make='TESLA', vehicle_type_id=None ), Model( model_id=17834, model='Model 3', make_id=441, make='TESLA', vehicle_type_id=None ), Model( model_id=27027, model='Model Y', make_id=441, make='TESLA', vehicle_type_id=None ) ] VehicleTypeId and VehicleType are only returned when you specify vehicle_type. \"\"\" models = self . _client . get_models_for_make ( make , model_year , vehicle_type ) schema = desert . schema ( Model , meta = self . _meta ) return [ schema . load ( snake_case ( m )) for m in models ]","title":"get_models_for_make()"},{"location":"typed_client.html#vpic.typed_client.TypedClient.get_parts","text":"Returns a list of vehicle documentation submitted by manufacturers. Manufacturers provide vehicle information to NHTSA to comply with these regulations: 49 CFR Part 565 (Vehicle Identification Number Guidance) 49 CFR Part 566 (Manufacturer Identification \u2013 Reporting Requirements) This provides a list of documents submitted in a date range. Up to 1,000 results will be returned at a time. Parameters: Name Type Description Default cfr_part str '565' to return 49 CFR Part 565 submissions; '566' to return 49 CFR Part 566 submissions required from_date str the beginning of the date range to search required to_date str the end of the date range to search required page int results are paginated; this is page number to return 1 Returns: Type Description List[vpic.models.Document] A list of Document s registered with vPIC. Exceptions: Type Description ValueError if cfr_part is missing Examples: >>> get_parts ( '565' , '2015-01-01' , '2015-05-05' , 1 ) [ Document ( cover_letter_url = '' , letter_date = '1/1/2015' , manufacturer_id = 959 , manufacturer = 'MASERATI NORTH AMERICA, INC.' , name = 'ORG13044' , url = '...' , type = None , model_year_from = 20 , model_year_to = None ), ... ] Source code in vpic/typed_client.py def get_parts ( self , cfr_part : str , from_date : str , to_date : str , page : int = 1 ) -> List [ Document ]: \"\"\"Returns a list of vehicle documentation submitted by manufacturers. Manufacturers provide vehicle information to NHTSA to comply with these regulations: * 49 CFR Part 565 (Vehicle Identification Number Guidance) * 49 CFR Part 566 (Manufacturer Identification \u2013 Reporting Requirements) This provides a list of documents submitted in a date range. Up to 1,000 results will be returned at a time. Args: cfr_part: '565' to return 49 CFR Part 565 submissions; '566' to return 49 CFR Part 566 submissions from_date: the beginning of the date range to search to_date: the end of the date range to search page: results are paginated; this is page number to return Returns: A list of ``Document``s registered with vPIC. Raises: ValueError: if ``cfr_part`` is missing Examples: >>> get_parts('565', '2015-01-01', '2015-05-05', 1) [ Document( cover_letter_url='', letter_date='1/1/2015', manufacturer_id=959, manufacturer='MASERATI NORTH AMERICA, INC.', name='ORG13044', url='...', type=None, model_year_from=20, model_year_to=None ), ... ] \"\"\" documents = self . _client . get_parts ( cfr_part , from_date , to_date , page ) for doc in documents : # snake_case doesn't handle lowerUPPER doc [ \"CoverLetterUrl\" ] = doc [ \"CoverLetterURL\" ] del doc [ \"CoverLetterURL\" ] schema = desert . schema ( Document , meta = self . _meta ) return [ schema . load ( snake_case ( doc )) for doc in documents ]","title":"get_parts()"},{"location":"typed_client.html#vpic.typed_client.TypedClient.get_vehicle_types_for_make","text":"Returns vehicle types produced by a make or make Parameters: Name Type Description Default make Union[str, int] Pass the MakeId (int) or the complete make name (str) to return vehicle types for a single manufacturer. Pass a partial make name to return vehicle types for all makes that match the partial name. When you pass a make name, results will include the MakeId and MakeName because you may get vehicle_types for more than one make. required Returns: Type Description List[vpic.models.VehicleType] A list of VehicleType s produced by the make (s) Exceptions: Type Description ValueError if make is missing Examples: >>> get_vehicle_types_for_make ( 474 ) [ VehicleType ( vehicle_type_id = 1 , vehicle_type = 'Motorcycle' , make_id = None , make = None ), VehicleType ( vehicle_type_id = 2 , vehicle_type = 'Passenger Car' , make_id = None , make = None ), VehicleType ( vehicle_type_id = 3 , vehicle_type = 'Truck ' , make_id = None , make = None ), VehicleType ( vehicle_type_id = 7 , vehicle_type = 'Multipurpose Passenger Vehicle (MPV)' , make_id = None , make = None ), VehicleType ( vehicle_type_id = 9 , vehicle_type = 'Low Speed Vehicle (LSV)' , make_id = None , make = None ) ] Source code in vpic/typed_client.py def get_vehicle_types_for_make ( self , make : Union [ str , int ]) -> List [ VehicleType ]: \"\"\"Returns vehicle types produced by a make or make Args: make: Pass the MakeId (int) or the complete make name (str) to return vehicle types for a single manufacturer. Pass a partial make name to return vehicle types for all makes that match the partial name. When you pass a make name, results will include the MakeId and MakeName because you may get vehicle_types for more than one make. Returns: A list of ``VehicleType``s produced by the ``make``(s) Raises: ValueError: if ``make`` is missing Examples: >>> get_vehicle_types_for_make(474) [ VehicleType( vehicle_type_id=1, vehicle_type='Motorcycle', make_id=None, make=None ), VehicleType( vehicle_type_id=2, vehicle_type='Passenger Car', make_id=None, make=None ), VehicleType( vehicle_type_id=3, vehicle_type='Truck ', make_id=None, make=None ), VehicleType( vehicle_type_id=7, vehicle_type='Multipurpose Passenger Vehicle (MPV)', make_id=None, make=None ), VehicleType( vehicle_type_id=9, vehicle_type='Low Speed Vehicle (LSV)', make_id=None, make=None ) ] \"\"\" schema = desert . schema ( VehicleType , meta = self . _meta ) results = self . _client . get_vehicle_types_for_make ( make ) snake_cased = [ snake_case ( r ) for r in results ] return [ schema . load ( sc ) for sc in snake_cased ]","title":"get_vehicle_types_for_make()"},{"location":"typed_client.html#vpic.typed_client.TypedClient.get_vehicle_variable_list","text":"Return a list of vehicle variables tracked by vPIC Returns: Type Description List[vpic.models.Variable] A list of Variable s Examples: >>> get_vehicle_variable_list () [ Variable ( id = 1 , name = 'Other Battery Info' , data_type = 'string' , descr ... ), Variable ( id = 2 , name = 'Battery Type' , data_type = 'lookup' , description ... ), Variable ( id = 3 , name = 'Bed Type' , data_type = 'lookup' , description = '<p...), Variable ( id = 4 , name = 'Cab Type' , data_type = 'lookup' , description = '<p...), Variable ( id = 5 , name = 'Body Class' , data_type = 'lookup' , description = '...), Variable ( id = 9 , name = 'Engine Number of Cylinders' , data_type = 'int' , ... ), ] Source code in vpic/typed_client.py def get_vehicle_variable_list ( self ) -> List [ Variable ]: \"\"\"Return a list of vehicle variables tracked by vPIC Returns: A list of ``Variable``s Examples: >>> get_vehicle_variable_list() [ Variable(id=1, name='Other Battery Info', data_type='string', descr...), Variable(id=2, name='Battery Type', data_type='lookup', description...), Variable(id=3, name='Bed Type', data_type='lookup', description='<p...), Variable(id=4, name='Cab Type', data_type='lookup', description='<p...), Variable(id=5, name='Body Class', data_type='lookup', description='...), Variable(id=9, name='Engine Number of Cylinders', data_type='int', ...), ] \"\"\" variables = self . _client . get_vehicle_variable_list () schema = desert . schema ( Variable , meta = self . _meta ) return [ schema . load ( snake_case ( v )) for v in variables ]","title":"get_vehicle_variable_list()"},{"location":"typed_client.html#vpic.typed_client.TypedClient.get_vehicle_variable_values_list","text":"Return the values for a vehicle variable Parameters: Name Type Description Default variable_name str the name of the vehicle variable required Returns: Type Description List[vpic.models.Value] A list of Values s Exceptions: Type Description ValueError if variable_name is missing Examples: >>> get_vehicle_variable_values_list ( \"Vehicle Type\" ) [ Value ( element_name = \"Vehicle Type\" , id = 1 , name = \"Motorcycle\" ), Value ( element_name = \"Vehicle Type\" , id = 2 , name = \"Passenger Car\" ), Value ( element_name = \"Vehicle Type\" , id = 3 , name = \"Truck \" ), Value ( element_name = \"Vehicle Type\" , id = 5 , name = \"Bus\" ), Value ( element_name = \"Vehicle Type\" , id = 6 , name = \"Trailer\" ), Value ( element_name = \"Vehicle Type\" , id = 7 , name = \"Multipurpose P...\" ), Value ( element_name = \"Vehicle Type\" , id = 9 , name = \"Low Speed Vehi...\" ), Value ( element_name = \"Vehicle Type\" , id = 10 , name = \"Incomplete Ve...\" ), Value ( element_name = \"Vehicle Type\" , id = 13 , name = \"Off Road Vehicle\" ) ] Source code in vpic/typed_client.py def get_vehicle_variable_values_list ( self , variable_name : str ) -> List [ Value ]: \"\"\"Return the values for a vehicle variable Args: variable_name: the name of the vehicle variable Returns: A list of ``Values``s Raises: ValueError: if ``variable_name`` is missing Examples: >>> get_vehicle_variable_values_list(\"Vehicle Type\") [ Value(element_name=\"Vehicle Type\", id=1, name=\"Motorcycle\"), Value(element_name=\"Vehicle Type\", id=2, name=\"Passenger Car\"), Value(element_name=\"Vehicle Type\", id=3, name=\"Truck \"), Value(element_name=\"Vehicle Type\", id=5, name=\"Bus\"), Value(element_name=\"Vehicle Type\", id=6, name=\"Trailer\"), Value(element_name=\"Vehicle Type\", id=7, name=\"Multipurpose P...\"), Value(element_name=\"Vehicle Type\", id=9, name=\"Low Speed Vehi...\"), Value(element_name=\"Vehicle Type\", id=10, name=\"Incomplete Ve...\"), Value(element_name=\"Vehicle Type\", id=13, name=\"Off Road Vehicle\") ] \"\"\" values = self . _client . get_vehicle_variable_values_list ( variable_name ) schema = desert . schema ( Value , meta = self . _meta ) return [ schema . load ( snake_case ( v )) for v in values ]","title":"get_vehicle_variable_values_list()"},{"location":"typed_client.html#vpic.typed_client.TypedClient.get_wmis_for_manufacturer","text":"Returns the WMIs for one or all manufacturers Parameters: Name Type Description Default manufacturer Union[str, int] Pass the Manufacturer Id (int) or the complete manufacturer name (str) to return WMIs for a single manufacturer. Pass a partial name to return WMIs for all manufacturers with names that include the partial name. required vehicle_type Union[str, int] Pass the vehicle_type Id (int) or complete vehicle_type name to return WMIs for that vehicle_type. Pass a partial name to return WMIs for vehicle_types matching that name. None Returns: Type Description List[vpic.models.WMI] A list of WorldManufacturerIndex with information about the manufacturers. Exceptions: Type Description ValueError if manufacturer is missing Examples: >>> get_wmis_for_manufacturer ( 'Honda' ) [ WorldManufacturerIndex ( created_on = '2015-03-26' , date_available_to_public = '2015-01-01' , manufacturer = 'HONDA MOTOR CO., LTD' , updated_on = '2015-06-04' , vehicle_type = 'Passenger Car' , wmi = 'JHM' , common_name = '' , country = None , make = '' , manufacturer_id = 987 , parent_company_name = '' , url = '' ), ... ] Source code in vpic/typed_client.py def get_wmis_for_manufacturer ( self , manufacturer : Union [ str , int ], vehicle_type : Optional [ Union [ str , int ]] = None , ) -> List [ WMI ]: \"\"\"Returns the WMIs for one or all manufacturers Args: manufacturer: Pass the Manufacturer Id (int) or the complete manufacturer name (str) to return WMIs for a single manufacturer. Pass a partial name to return WMIs for all manufacturers with names that include the partial name. vehicle_type: Pass the vehicle_type Id (int) or complete vehicle_type name to return WMIs for that vehicle_type. Pass a partial name to return WMIs for vehicle_types matching that name. Returns: A list of ``WorldManufacturerIndex`` with information about the manufacturers. Raises: ValueError: if ``manufacturer`` is missing Examples: >>> get_wmis_for_manufacturer('Honda') [ WorldManufacturerIndex( created_on='2015-03-26', date_available_to_public='2015-01-01', manufacturer='HONDA MOTOR CO., LTD', updated_on='2015-06-04', vehicle_type='Passenger Car', wmi='JHM', common_name='', country=None, make='', manufacturer_id=987, parent_company_name='', url='' ), ... ] \"\"\" wmis = self . _client . get_wmis_for_manufacturer ( manufacturer , vehicle_type ) schema = desert . schema ( WMI , meta = self . _meta ) return [ schema . load ( snake_case ( wmi )) for wmi in wmis ]","title":"get_wmis_for_manufacturer()"}]}